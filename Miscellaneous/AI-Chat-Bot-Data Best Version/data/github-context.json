[
  {
    "name": "BearChat",
    "full_name": "ArleenMonteiro/BearChat",
    "description": "UC-specific chatbot.",
    "html_url": "https://github.com/ArleenMonteiro/BearChat",
    "language": "Python",
    "visibility": "private",
    "created_at": "2023-02-25T19:47:34Z",
    "updated_at": "2024-07-29T00:58:35Z",
    "pushed_at": "2023-02-26T16:06:30Z",
    "stargazers_count": 0,
    "forks_count": 1,
    "readme": "# BearChat\nUC-specific chatbot.\n\n## Inspiration\nWe were inspired by the lack of personal voice assistant/chatbot for the students of the University of Cincinnati. Something that is UC student-specific would be greatly beneficial.\n\n For example, it could help students navigate the campus, find the locations of classrooms, labs, and offices, provide information about course schedules, grades, assignments, and exams, and answer frequently asked questions about campus life and services.\n\nAdditionally, a voice assistant could provide **personalized support** and guidance to students, helping them stay on track with their academic and personal goals. It could offer reminders for deadlines and appointments, suggest study resources and techniques, provide feedback on assignments and projects, and connect students with academic advisors and support services.\n\n## What it does\n\nThe BearChat has several features, some of which are:\n\nCampus Navigation: BearChat helps students navigate the campus by providing directions to buildings, classrooms, and offices. It can also suggest the best route to take based on the student's location.\n\nCampus Services: The voice assistant could provide information about various campus services such as the library, counseling center, health center, and career center. It could also help students schedule appointments or connect with the appropriate staff.\n\nCampus Events: BearChat can keep students informed about upcoming campus events such as concerts, lectures, and workshops. It could also suggest events that may be of interest to the student based on their preferences.\n\nTherapy Suggestions: During stressful times, BearChat can suggest resources for mental health and well-being. For example, it could recommend therapy sessions or mindfulness exercises.\n\nWeather Information: BearChat can provide students with up-to-date weather information such as the temperature, humidity, and precipitation forecast for the day.\n\nMusic Streaming: BearChat can play music for students, either by suggesting a playlist or artist, or by playing the student's preferred genre or style of music.\n\nPersonalized Recommendations: Over time, BearChat learn the student's preferences and suggest personalized recommendations for campus services, events, and activities.\n\n\n## How we built it\n\nBearChat uses NLTK on Python using Tensorflow and Pytorch and is converted to a python web browser using Flask. Along with this, the instances in the Python program use various Google APIs like the text-to-speech API and the weather API. The front-end was created using Flask(Python), HTML, CSS and JavaScript.\n\n\n## Challenges we ran into\n\nWe ran into challenges while trying to convert thePython file using Flask as Tensorflow did not seem to be compatible with the pip version we were using. Upon various attempts, we realised that Tensorflow alone wouldn't work so we moved on to using both Tensorflow and Pytorch. \n\nWhile running the code, the audio created by the voice assistant does not seem to be sent back to the main HTML. This is a problem we haven't been able to resolve.\n\n## Accomplishments that we're proud of\n\nWe are proud that we were successfully able to make a chatbot on the back-end side. It was able to run with 99% accuracy. Our front-end looks wonderful too!\n\n## What we learned\n\nWe learned how to use Flask and Pytorch  and also understood back-end to front-end attachment.\n\n## What's next for BearChat\n\nWe plan on adding more features to BearChat and providing it with Google Cloud connectivity which will allow it to be personalised based on any UC student. We also want to be able to add more buildings/parking spots on the location services and also name the UC buses that run on the shuttle services. Overall, we want to improve the student experience in relation to our website.\n\n## Front-end\n\n<img width=\"1440\" alt=\"Screenshot 2023-02-26 at 10 17 42 AM\" src=\"https://user-images.githubusercontent.com/111902870/221419548-8ae0d51e-ad72-409c-b2bf-1d1eff75825a.png\">"
  },
  {
    "name": "LWC-Elastic-Search",
    "full_name": "kanavshetty/LWC-Elastic-Search",
    "html_url": "https://github.com/kanavshetty/LWC-Elastic-Search",
    "language": "TypeScript",
    "visibility": "private",
    "created_at": "2025-01-15T15:33:00Z",
    "updated_at": "2025-01-15T16:27:34Z",
    "pushed_at": "2025-01-15T16:27:33Z",
    "stargazers_count": 0,
    "forks_count": 0,
    "readme": "# Live Well Collaborative POV UI\n\nThis is a sample app that combines Elasticsearch, Langchain and a number of different LLMs to create a chatbot experience with ELSER with your own private data.\n\n**Requires at least 8.11.0 of Elasticsearch.**\n\n![Screenshot of the sample app](./app-demo.gif)\n\n## Installing and connecting to Elasticsearch\n\n### Install Elasticsearch\n\nThere are a number of ways to install Elasticsearch. Cloud is best for most use-cases. Visit the [Install Elasticsearch](https://www.elastic.co/search-labs/tutorials/install-elasticsearch) for more information.\n\n### Connect to Elasticsearch\n\nThis app requires the following environment variables to be set to connect to Elasticsearch hosted on Elastic Cloud:\n\n```sh\nexport ELASTIC_CLOUD_ID=...\nexport ELASTIC_API_KEY=...\n```\n\nYou can add these to a `.env` file for convenience. See the `env.example` file for a .env file template.\n\n#### Self-Hosted Elasticsearch\n\nYou can also connect to a self-hosted Elasticsearch instance. To do so, you will need to set the following environment variables:\n\n```sh\nexport ELASTICSEARCH_URL=...\n```\n\n### Change the Elasticsearch index and chat_history index\n\nBy default, the app will use the `workplace-app-docs` index and the chat history index will be `workplace-app-docs-chat-history`. If you want to change these, you can set the following environment variables:\n\n```sh\nES_INDEX=workplace-app-docs\nES_INDEX_CHAT_HISTORY=workplace-app-docs-chat-history\n```\n\n## Connecting to LLM\n\nWe support several LLM providers. To use one of them, you need to set the `LLM_TYPE` environment variable. For example:\n\n```sh\nexport LLM_TYPE=azure\n```\n\nThe following sub-sections define the configuration requirements of each supported LLM.\n\n### OpenAI\n\nTo use OpenAI LLM, you will need to provide the OpenAI key via `OPENAI_API_KEY` environment variable:\n\n```sh\nexport LLM_TYPE=openai\nexport OPENAI_API_KEY=...\n```\n\nYou can get your OpenAI key from the [OpenAI dashboard](https://platform.openai.com/account/api-keys).\n\n### Azure OpenAI\n\nIf you want to use Azure LLM, you will need to set the following environment variables:\n\n```sh\nexport LLM_TYPE=azure\nexport OPENAI_VERSION=... # e.g. 2023-05-15\nexport OPENAI_BASE_URL=...\nexport OPENAI_API_KEY=...\nexport OPENAI_ENGINE=... # deployment name in Azure\n```\n\n### Bedrock LLM\n\nTo use Bedrock LLM you need to set the following environment variables in order to authenticate to AWS.\n\n```sh\nexport LLM_TYPE=bedrock\nexport AWS_ACCESS_KEY=...\nexport AWS_SECRET_KEY=...\nexport AWS_REGION=... # e.g. us-east-1\nexport AWS_MODEL_ID=... # Default is anthropic.claude-v2\n```\n\n#### AWS Config\n\nOptionally, you can connect to AWS via the config file in `~/.aws/config` described here:\nhttps://boto3.amazonaws.com/v1/documentation/api/latest/guide/credentials.html#configuring-credentials\n\n```\n[default]\naws_access_key_id=...\naws_secret_access_key=...\nregion=...\n```\n\n### Vertex AI\n\nTo use Vertex AI you need to set the following environment variables. More information [here](https://python.langchain.com/docs/integrations/llms/google_vertex_ai_palm).\n\n```sh\nexport LLM_TYPE=vertex\nexport VERTEX_PROJECT_ID=<gcp-project-id>\nexport VERTEX_REGION=<gcp-region> # Default is us-central1\nexport GOOGLE_APPLICATION_CREDENTIALS=<path-json-service-account>\n```\n\n### Mistral AI\n\nTo use Mistral AI you need to set the following environment variables. The app has been tested with Mistral Large Model deployed through Microsoft Azure. More information [here](https://learn.microsoft.com/en-us/azure/ai-studio/how-to/deploy-models-mistral).\n\n```\nexport LLM_TYPE=mistral\nexport MISTRAL_API_KEY=...\nexport MISTRAL_API_ENDPOINT=...  # should be of the form https://<endpoint>.<region>.inference.ai.azure.com\nexport MISTRAL_MODEL=...  # optional\n```\n\n### Cohere\n\nTo use Cohere you need to set the following environment variables:\n\n```\nexport LLM_TYPE=cohere\nexport COHERE_API_KEY=...\nexport COHERE_MODEL=...  # optional\n```\n\n## Running the App\n\nOnce you have indexed data into the Elasticsearch index, there are two ways to run the app: via Docker or locally. Docker is advised for testing & production use. Locally is advised for development.\n\n### Through Docker\n\nBuild the Docker image and run it with the following environment variables.\n\n```sh\ndocker build -f Dockerfile -t chatbot-rag-app .\n```\n\n#### Ingest data\n\nMake sure you have a `.env` file with all your variables, then run:\n\n```sh\ndocker run --rm --env-file .env chatbot-rag-app flask create-index\n```\n\nSee \"Ingest data\" section under Running Locally for more details about the `flask create-index` command.\n\n#### Run API and frontend\n\nYou will need to set the appropriate environment variables in your `.env` file. See the `env.example` file for instructions.\n\n```sh\ndocker run --rm -p 4000:4000 --env-file .env -d chatbot-rag-app\n```\n\nNote that if you are using an LLM that requires an external credentials file (such as Vertex AI), you will need to make this file accessible to the container in the `run` command above. For this you can use a bind mount, or you can also edit the Dockerfile to copy the credentials file to the container image at build time.\n\n### Locally (for development)\n\nWith the environment variables set, you can run the following commands to start the server and frontend.\n\n#### Pre-requisites\n\n- Python 3.8+\n- Node 14+\n\n#### Install the dependencies\n\nFor Python we recommend using a virtual environment.\n\n_ℹ️ Here's a good [primer](https://realpython.com/python-virtual-environments-a-primer) on virtual environments from Real Python._\n\n```sh\n# Create a virtual environment\npython -m venv .venv\n\n# Activate the virtual environment\nsource .venv/bin/activate\n\n# Install Python dependencies\npip install -r requirements.txt\n\n# Install Node dependencies\ncd frontend && yarn && cd ..\n```\n\n#### Ingest data\n\nYou can index the sample data from the provided .json files in the `data` folder:\n\n```sh\nflask create-index\n```\n\nBy default, this will index the data into the `workplace-app-docs` index. You can change this by setting the `ES_INDEX` environment variable.\n\n##### Indexing your own data\n\nThe ingesting logic is stored in `data/index-data.py`. This is a simple script that uses Langchain to index data into Elasticsearch, using the `JSONLoader` and `CharacterTextSplitter` to split the large documents into passages. Modify this script to index your own data.\n\nLangchain offers many different ways to index data, if you cant just load it via JSONLoader. See the [Langchain documentation](https://python.langchain.com/docs/modules/data_connection/document_loaders)\n\nRemember to keep the `ES_INDEX` environment variable set to the index you want to index into and to query from.\n\n#### Run API and frontend\n\n```sh\n# Launch API app\nflask run\n\n# In a separate terminal launch frontend app\ncd frontend && yarn start\n```\n\nYou can now access the frontend at http://localhost:3000. Changes are automatically reloaded."
  },
  {
    "name": "1ST-TRIAL-BOT",
    "full_name": "Kartavya904/1ST-TRIAL-BOT",
    "html_url": "https://github.com/Kartavya904/1ST-TRIAL-BOT",
    "visibility": "private",
    "created_at": "2021-05-07T14:31:44Z",
    "updated_at": "2021-05-07T14:31:44Z",
    "pushed_at": "2021-05-07T14:31:45Z",
    "stargazers_count": 0,
    "forks_count": 0
  },
  {
    "name": "2023-MakeUC-Hackathon",
    "full_name": "Kartavya904/2023-MakeUC-Hackathon",
    "description": "This is a Repository for the MakeUC Hackathon 2023, shared with ShivamKGate (Teammate)",
    "html_url": "https://github.com/Kartavya904/2023-MakeUC-Hackathon",
    "language": "Python",
    "visibility": "public",
    "created_at": "2023-11-04T16:34:47Z",
    "updated_at": "2024-01-06T21:40:24Z",
    "pushed_at": "2024-03-14T21:55:53Z",
    "stargazers_count": 1,
    "forks_count": 1
  },
  {
    "name": "2024-Future-of-Data-Hackathon",
    "full_name": "Kartavya904/2024-Future-of-Data-Hackathon",
    "description": "This is the Public Repository for the Future of Data Hackathon for our Team consisting of Kartavya Singh, Saarthak Sinha, & Shivam Kharangate.",
    "html_url": "https://github.com/Kartavya904/2024-Future-of-Data-Hackathon",
    "language": "HTML",
    "visibility": "public",
    "created_at": "2024-08-24T20:45:23Z",
    "updated_at": "2024-09-04T03:58:57Z",
    "pushed_at": "2024-09-04T03:58:54Z",
    "stargazers_count": 1,
    "forks_count": 2,
    "readme": "# 2024 Future of Data Hackathon\r\n## https://github.com/Kartavya904/2024-Future-of-Data-Hackathon\r\n\r\n### FinVest: Budget Smart, Invest Sharp\r\n\r\nIntroducing our team for the Future of Data Hackathon: Kartavya Singh, Phani Jarugumilli, Saarthak Sinha, and Shivam Kharangate.\r\n\r\nWe are developing a cutting-edge data visualization project in the finance domain—a one-stop app for managing your finances. Our app will support budgeting across various banks, enabling users to track earnings, monitor spending, and visualize transactions with clarity.\r\n\r\nIn addition to budgeting, our app will provide comprehensive insights into stocks, explaining how they work, their related factors, and the best strategies for investing. To enhance the user experience, we’re incorporating 3D visualizations of stock charts, offering an immersive and in-depth view of financial data.\r\n\r\nMoreover, we plan to develop an interactive game to teach users the fundamentals of stock trading, inspired by paper trading platforms like TradingView.\r\n\r\nPlease find the Google Drive for the VR Implementation of the game at: https://drive.google.com/file/d/1yAT80_UkEFnocI_3aqeulpqX3kRl22ye/view?usp=sharing"
  },
  {
    "name": "2024-RevolutionUC-Hackathon",
    "full_name": "Kartavya904/2024-RevolutionUC-Hackathon",
    "description": "This is the \"HealthSphere: Data-Driven Wellness Solutions\" repository for RevolutionUC Hackathon 2024 hosted on February 24, 2024. ",
    "html_url": "https://github.com/Kartavya904/2024-RevolutionUC-Hackathon",
    "visibility": "public",
    "created_at": "2024-09-12T03:20:53Z",
    "updated_at": "2024-09-12T03:20:54Z",
    "pushed_at": "2024-02-26T00:20:34Z",
    "stargazers_count": 0,
    "forks_count": 0,
    "readme": "This is the Revolution UC 2024 Hackathon Project from Team Kartavya & Shivam. \nThe Project is called HealthSphere: - Data-Driven Wellness Solution\n\nTo Get Started with this project: \n\nWindows:\n    Pre-requisites: \n        Python 3.8+ & Python 3.11-\n        Requirements.txt file from the directory\n\n    Steps:\n    1. To Activate the Flask-Python Backend\n        You would need to be in the right directory of 2024-RevolutionUC-Hackathon/HealthSphere: \n        So if you aren't here already you can type : \n        'cd 2024-RevolutionUC-Hackathon/HealthSphere'\n\n        or \n\n        \"cd HealthSphere\"\n\n        once you are at the root of the project\n\n        to download the required libraries for the virtual environment use the following command:\n\n        \"pip install -r requirements.txt\"\n\n        create a virtual environment using the following command: \n\n        \"python -m venv venv\"\n\n        activate the virtual environment using the following command:\n\n        \"venv/Scripts/activate\"\n\n        to deactivate the virtual environment use the following command:\n\n        \"deactivate\" (optional)\n\n        to download the required libraries for the virtual environment use the following command:\n\n        \"pip install -r requirements.txt\"\n\n        to run the project use the following command:\n\n        \"python app.py\"\n\n    2. To Launch the Taipy Dashboard use the following command\n        2.1 create another Terminal\n        2.2 python taipyserver.py\n\n        launch it on http://127.0.0.1:8080\n\n\nMac:\n    For macOS, the steps are quite similar to those for Windows, but there are a few differences. Here are the instructions for setting up and running the HealthSphere project on macOS:\n\nPre-requisites:\nPython 3.8+ & Python 3.11-\nRequirements.txt file from the project directory\nTerminal application\nSteps:\nOpen Terminal:\nOpen the Terminal application on your macOS. You can find it by searching for \"Terminal\" in Spotlight or navigating to Applications > Utilities > Terminal.\n\nNavigate to Project Directory:\nUse the cd command to navigate to the root directory of your HealthSphere project. If the project is located in your home directory, you can use:\n\njavascript\nCopy code\ncd ~/2024-RevolutionUC-Hackathon/HealthSphere\nIf it's located elsewhere, navigate to the appropriate directory.\n\nSetup Virtual Environment:\nRun the following commands in Terminal to set up a virtual environment and activate it:\n\nbash\nCopy code\npython3 -m venv venv\nsource venv/bin/activate\nInstall Dependencies:\nOnce the virtual environment is activated, install the required Python libraries using pip:\n\nCopy code\npip install -r requirements.txt\nRun Flask Backend:\nStart the Flask backend server by running:\n\nCopy code\npython app.py\nLaunch Taipy Dashboard:\nOpen another Terminal window (or tab) and navigate to the project directory if you're not already there.\n\nThen, run the Taipy Dashboard server using:\n\nCopy code\npython taipyserver.py\nAccess the Application:\nOnce both the Flask backend and Taipy Dashboard are running, you can access the HealthSphere application by visiting http://127.0.0.1:8080 in your web browser."
  },
  {
    "name": "Animal-Detector-HKTHN",
    "full_name": "Kartavya904/Animal-Detector-HKTHN",
    "description": "This is a private repository for animal detector for hackathon ",
    "html_url": "https://github.com/Kartavya904/Animal-Detector-HKTHN",
    "language": "Python",
    "visibility": "private",
    "created_at": "2023-10-08T21:48:58Z",
    "updated_at": "2023-11-03T05:59:59Z",
    "pushed_at": "2023-11-03T15:53:24Z",
    "stargazers_count": 0,
    "forks_count": 0,
    "readme": "# Animal-Detector-HKTHN\nThis is a private repository for animal detector for hackathon"
  },
  {
    "name": "AniRaid-Repo",
    "full_name": "Kartavya904/AniRaid-Repo",
    "description": "AniRaid Priv Repo",
    "html_url": "https://github.com/Kartavya904/AniRaid-Repo",
    "language": "JavaScript",
    "visibility": "public",
    "created_at": "2021-06-24T23:41:44Z",
    "updated_at": "2024-09-14T06:38:28Z",
    "pushed_at": "2024-09-14T06:38:25Z",
    "stargazers_count": 0,
    "forks_count": 0
  },
  {
    "name": "AniRaid-Testing-Coding-Dominion-Bot",
    "full_name": "Kartavya904/AniRaid-Testing-Coding-Dominion-Bot",
    "description": "AniRaid-Testing-Coding-Dominion-Bot",
    "html_url": "https://github.com/Kartavya904/AniRaid-Testing-Coding-Dominion-Bot",
    "language": "JavaScript",
    "visibility": "public",
    "created_at": "2021-07-26T22:29:57Z",
    "updated_at": "2022-05-08T17:48:03Z",
    "pushed_at": "2021-08-11T10:58:33Z",
    "stargazers_count": 0,
    "forks_count": 0
  },
  {
    "name": "AniRaid_CD-Bot-Latest",
    "full_name": "Kartavya904/AniRaid_CD-Bot-Latest",
    "description": "Most Recent",
    "html_url": "https://github.com/Kartavya904/AniRaid_CD-Bot-Latest",
    "language": "JavaScript",
    "visibility": "public",
    "created_at": "2021-09-16T09:45:57Z",
    "updated_at": "2022-05-08T17:47:09Z",
    "pushed_at": "2021-10-05T18:25:27Z",
    "stargazers_count": 0,
    "forks_count": 1
  },
  {
    "name": "Artificial-Intelligence-Course",
    "full_name": "Kartavya904/Artificial-Intelligence-Course",
    "html_url": "https://github.com/Kartavya904/Artificial-Intelligence-Course",
    "language": "Python",
    "visibility": "public",
    "created_at": "2024-09-23T22:18:35Z",
    "updated_at": "2024-09-23T22:30:39Z",
    "pushed_at": "2024-09-23T22:30:35Z",
    "stargazers_count": 0,
    "forks_count": 0,
    "readme": "# Artificial-Intelligence-Course"
  },
  {
    "name": "BearChat-RevolutionUC2023",
    "full_name": "Kartavya904/BearChat-RevolutionUC2023",
    "description": "UC-specific chatbot.",
    "html_url": "https://github.com/Kartavya904/BearChat-RevolutionUC2023",
    "visibility": "private",
    "created_at": "2024-11-05T03:43:44Z",
    "updated_at": "2024-11-05T03:43:44Z",
    "pushed_at": "2023-02-26T16:06:30Z",
    "stargazers_count": 0,
    "forks_count": 0,
    "readme": "# BearChat\nUC-specific chatbot.\n\n## Inspiration\nWe were inspired by the lack of personal voice assistant/chatbot for the students of the University of Cincinnati. Something that is UC student-specific would be greatly beneficial.\n\n For example, it could help students navigate the campus, find the locations of classrooms, labs, and offices, provide information about course schedules, grades, assignments, and exams, and answer frequently asked questions about campus life and services.\n\nAdditionally, a voice assistant could provide **personalized support** and guidance to students, helping them stay on track with their academic and personal goals. It could offer reminders for deadlines and appointments, suggest study resources and techniques, provide feedback on assignments and projects, and connect students with academic advisors and support services.\n\n## What it does\n\nThe BearChat has several features, some of which are:\n\nCampus Navigation: BearChat helps students navigate the campus by providing directions to buildings, classrooms, and offices. It can also suggest the best route to take based on the student's location.\n\nCampus Services: The voice assistant could provide information about various campus services such as the library, counseling center, health center, and career center. It could also help students schedule appointments or connect with the appropriate staff.\n\nCampus Events: BearChat can keep students informed about upcoming campus events such as concerts, lectures, and workshops. It could also suggest events that may be of interest to the student based on their preferences.\n\nTherapy Suggestions: During stressful times, BearChat can suggest resources for mental health and well-being. For example, it could recommend therapy sessions or mindfulness exercises.\n\nWeather Information: BearChat can provide students with up-to-date weather information such as the temperature, humidity, and precipitation forecast for the day.\n\nMusic Streaming: BearChat can play music for students, either by suggesting a playlist or artist, or by playing the student's preferred genre or style of music.\n\nPersonalized Recommendations: Over time, BearChat learn the student's preferences and suggest personalized recommendations for campus services, events, and activities.\n\n\n## How we built it\n\nBearChat uses NLTK on Python using Tensorflow and Pytorch and is converted to a python web browser using Flask. Along with this, the instances in the Python program use various Google APIs like the text-to-speech API and the weather API. The front-end was created using Flask(Python), HTML, CSS and JavaScript.\n\n\n## Challenges we ran into\n\nWe ran into challenges while trying to convert thePython file using Flask as Tensorflow did not seem to be compatible with the pip version we were using. Upon various attempts, we realised that Tensorflow alone wouldn't work so we moved on to using both Tensorflow and Pytorch. \n\nWhile running the code, the audio created by the voice assistant does not seem to be sent back to the main HTML. This is a problem we haven't been able to resolve.\n\n## Accomplishments that we're proud of\n\nWe are proud that we were successfully able to make a chatbot on the back-end side. It was able to run with 99% accuracy. Our front-end looks wonderful too!\n\n## What we learned\n\nWe learned how to use Flask and Pytorch  and also understood back-end to front-end attachment.\n\n## What's next for BearChat\n\nWe plan on adding more features to BearChat and providing it with Google Cloud connectivity which will allow it to be personalised based on any UC student. We also want to be able to add more buildings/parking spots on the location services and also name the UC buses that run on the shuttle services. Overall, we want to improve the student experience in relation to our website.\n\n## Front-end\n\n<img width=\"1440\" alt=\"Screenshot 2023-02-26 at 10 17 42 AM\" src=\"https://user-images.githubusercontent.com/111902870/221419548-8ae0d51e-ad72-409c-b2bf-1d1eff75825a.png\">"
  },
  {
    "name": "Checklist",
    "full_name": "Kartavya904/Checklist",
    "html_url": "https://github.com/Kartavya904/Checklist",
    "visibility": "private",
    "created_at": "2021-05-12T17:01:53Z",
    "updated_at": "2021-05-12T17:01:53Z",
    "pushed_at": "2021-05-12T17:01:54Z",
    "stargazers_count": 0,
    "forks_count": 0
  },
  {
    "name": "Chika",
    "full_name": "Kartavya904/Chika",
    "html_url": "https://github.com/Kartavya904/Chika",
    "language": "Python",
    "visibility": "public",
    "created_at": "2021-05-03T13:58:58Z",
    "updated_at": "2021-09-22T17:52:41Z",
    "pushed_at": "2021-09-22T17:52:37Z",
    "stargazers_count": 0,
    "forks_count": 0,
    "readme": "# Chika\n[![discord.py](https://img.shields.io/badge/using-discord.py-00bb88.svg?logo=discord&logoWidth=15)](https://github.com/Rapptz/discord.py)\n[![python](https://img.shields.io/badge/python-3.8.9-blue.svg?logo=python&logoWidth=15)](https://discord.gg/wR8uJkT9NT)\n\n[![Chika](https://cdn.discordapp.com/avatars/837975076275224597/7ab815d93d6b7419da5b3384766ac8ee.png?size=256)](https://discord.gg/wR8uJkT9NT)\n\nChika is a invite logger bot made with discord.py for a server name Heaven's CoffeeShop"
  },
  {
    "name": "Cleanify-2024-MakeUC-Hackathon",
    "full_name": "Kartavya904/Cleanify-2024-MakeUC-Hackathon",
    "description": "This is the Public Repository for the MakeUC Hackathon for our Team consisting of Shivam Kharangate, Kartavya Singh, Nandini Agarwal, and Mahika Gunjkar.",
    "html_url": "https://github.com/Kartavya904/Cleanify-2024-MakeUC-Hackathon",
    "visibility": "public",
    "created_at": "2024-11-13T21:37:47Z",
    "updated_at": "2025-01-28T04:23:30Z",
    "pushed_at": "2024-11-10T16:42:18Z",
    "stargazers_count": 1,
    "forks_count": 0,
    "readme": "# Cleanify \r\n\r\n**Cleanify** is an educational Python game focused on environmental awareness. Players collect trash at different POVs, leveling up to unlock real-world environmental facts. The game encourages learning & educates users about pollution and conservation through gameplay.\r\n\r\n## Features\r\n- **Account Management**: Create Account, Log In, and Track Progress.\r\n- **Exploration**: Navigate a virtual POVs and collect trash items that spawn at random locations.\r\n- **Storage and Scoring Mechanic**: Collect as much trash as your storage allows, deposit it in the central trash bin to free up storage, and continue collecting.\r\n- **Leveling System**: Level up as you collect more trash and complete quests, which increases your storage capacity and challenges.\r\n- **Environmental Facts**: Unlock real-world environmental facts based on your score. Higher levels reveal more impactful facts, educating players on the effects of pollution and conservation efforts.\r\n- **Session History**: View previous sessions, unlocked facts, and your cumulative impact on environmental conservation.\r\n\r\n## Game Flow\r\n1. **Account Creation**: Register to start at Level 1.\r\n2. **Gameplay**: Collect trash on the beach, deposit it to clear storage, and gain points.\r\n3. **Level Progression**: Unlock harder challenges and impactful facts with each level.\r\n4. **Session Summary**: View total trash collected, score, and new facts at the end of each game.\r\n\r\n\r\n## Installation\r\n\r\n1. **Clone the Repo**:\r\n   git clone https://github.com/ShivamKGate/2024-MakeUC-Hackathon\r\n2. **Install Dependencies**:\r\n    python -m pip install -r requirements.txt\r\n3. **Create a .env file**:\r\n    create a .env file, and add ```MONGO_PASSWORD=2024-MakeUC-Hackathon```\r\n3. **Run the Game**:\r\n    python main.py\r\n\r\n## Tech Stack\r\n- **Python**: Main programming language\r\n- **MongoDB**: Database for user data and game sessions\r\n- **Pygame**: For graphical interface\r\n- **pymongo**: MongoDB connection\r\n- **bcrypt**: Password hashing for security\r\n\r\n## Future Enhancements\r\n- **Expanded Maps**: Add different ecosystems.\r\n- **Leaderboard**: Track top scores for competitive play."
  },
  {
    "name": "Coding-Dominion",
    "full_name": "Kartavya904/Coding-Dominion",
    "description": "Hi, This Is The Developer Of The Coding Dominion Bot.  This Is My First Ever Professional Bot That I've created.  I Hope For Your Support In All My Steps.",
    "html_url": "https://github.com/Kartavya904/Coding-Dominion",
    "language": "JavaScript",
    "visibility": "private",
    "created_at": "2021-05-08T18:28:48Z",
    "updated_at": "2021-05-12T13:32:15Z",
    "pushed_at": "2021-05-12T13:32:12Z",
    "stargazers_count": 0,
    "forks_count": 0
  },
  {
    "name": "Coding-Dominion-Bot",
    "full_name": "Kartavya904/Coding-Dominion-Bot",
    "description": "Hi, This Is The Developer Of The Coding Dominion Bot.  This Is My First Ever Professional Bot That I've created.  I Hope For Your Support In All My Steps.",
    "html_url": "https://github.com/Kartavya904/Coding-Dominion-Bot",
    "language": "JavaScript",
    "visibility": "private",
    "created_at": "2021-05-12T17:12:46Z",
    "updated_at": "2021-07-26T16:22:47Z",
    "pushed_at": "2021-07-26T16:22:44Z",
    "stargazers_count": 0,
    "forks_count": 0
  },
  {
    "name": "CS3003-HaskellAssignment",
    "full_name": "Kartavya904/CS3003-HaskellAssignment",
    "description": "Skeleton code for the Haskell Assignment",
    "html_url": "https://github.com/Kartavya904/CS3003-HaskellAssignment",
    "visibility": "public",
    "created_at": "2023-12-04T23:20:26Z",
    "updated_at": "2023-12-04T23:20:26Z",
    "pushed_at": "2023-11-26T22:24:06Z",
    "stargazers_count": 0,
    "forks_count": 0
  },
  {
    "name": "CS4092_Final_Project",
    "full_name": "Kartavya904/CS4092_Final_Project",
    "description": "This is the ECommerce Store for Database Course CS4092",
    "html_url": "https://github.com/Kartavya904/CS4092_Final_Project",
    "language": "HTML",
    "visibility": "public",
    "created_at": "2024-08-06T01:52:51Z",
    "updated_at": "2024-08-06T03:35:55Z",
    "pushed_at": "2024-08-06T03:35:52Z",
    "stargazers_count": 0,
    "forks_count": 0
  },
  {
    "name": "ENED_Robot_Team248",
    "full_name": "Kartavya904/ENED_Robot_Team248",
    "description": "These Are The Codes For The ENED Robot For Team 248",
    "html_url": "https://github.com/Kartavya904/ENED_Robot_Team248",
    "language": "Python",
    "visibility": "public",
    "created_at": "2022-03-06T23:13:54Z",
    "updated_at": "2022-03-06T23:16:58Z",
    "pushed_at": "2022-03-06T23:16:56Z",
    "stargazers_count": 0,
    "forks_count": 0
  },
  {
    "name": "FinVest-Future-Of-Data-Hackathon-2024",
    "full_name": "Kartavya904/FinVest-Future-Of-Data-Hackathon-2024",
    "description": "2024 Future of Data Hackathon https://github.com/Kartavya904/2024-Future-of-Data-Hackathon FinVest: Budget Smart, Invest Sharp",
    "html_url": "https://github.com/Kartavya904/FinVest-Future-Of-Data-Hackathon-2024",
    "language": "HTML",
    "visibility": "public",
    "created_at": "2024-09-04T00:32:29Z",
    "updated_at": "2024-09-04T01:28:38Z",
    "pushed_at": "2024-09-04T01:28:32Z",
    "stargazers_count": 0,
    "forks_count": 0
  },
  {
    "name": "Full-Stack-AI-Powered-Job-Interview-Prep",
    "full_name": "Kartavya904/Full-Stack-AI-Powered-Job-Interview-Prep",
    "description": "AI-Powered Job Interview Prep Assistant",
    "html_url": "https://github.com/Kartavya904/Full-Stack-AI-Powered-Job-Interview-Prep",
    "language": "Python",
    "visibility": "public",
    "created_at": "2024-10-13T04:28:13Z",
    "updated_at": "2025-01-15T09:31:50Z",
    "pushed_at": "2024-11-03T23:13:35Z",
    "stargazers_count": 2,
    "forks_count": 0,
    "readme": "# AI-Powered Job Interview Prep Assistant\n\n## Overview\nThis project is designed by Kartavya Singh to assist job seekers by generating interview questions based on the job description and user-provided documents (resume, cover letter). It also evaluates answers using Natural Language Processing (NLP) and provides feedback on clarity, confidence, and relevance. The platform suggests ideal answers based on the user’s documents and industry trends.\n\n## Features\n- **User Authentication:** Login/Sign-up system with MongoDB for user data storage.\n- **Job Description Input:** Users can either paste a job description or provide a link to the job posting.\n- **Resume & Document Upload:** Users can upload their resume, cover letter, and other documents.\n- **AI-Based Question Generation:** Generates interview questions based on the user’s resume and job description.\n- **NLP-Powered Answer Evaluation:** Provides feedback on the clarity, confidence, and relevance of user-provided answers.\n- **Sample Answers:** Generates potential answers based on the uploaded documents.\n\n## Tech Stack\n- **Backend:** Flask (Python)\n- **Frontend:** HTML, CSS, JavaScript (React optional for interactive UIs)\n- **Database:** MongoDB (for storing user data, resumes, and job descriptions)\n- **NLP:** Hugging Face's BERT (for question generation and answer evaluation)\n\n## How it Works\n- **User Sign-Up/Login:** Users create an account or log in. All data is securely saved in MongoDB.\n- **Job Description Upload:** Users paste the job description or upload the link to a job posting.\n- **Resume & Document Upload:** Users upload their resume, cover letter, and other documents.\n- **Question Generation:** Based on the documents and job description, the platform generates interview questions tailored to the user’s experience and the position.\n- **Answer Feedback:** Users can practice their responses, which are evaluated by an AI model, and receive feedback.\n- **Suggested Answers:** The platform generates an optimal answer based on the user’s documents for each question.\n\n## Requirements\n- Python 3.8+\n- Flask\n- MongoDB\n- Hugging Face Transformers Library (for NLP)\n- React (optional for a dynamic frontend)\n- HTML, CSS, JavaScript (for frontend if not using React)"
  },
  {
    "name": "Hackathon_Project_Files",
    "full_name": "Kartavya904/Hackathon_Project_Files",
    "description": "This is the RevUC Hackathon GitHub Repository, for the sharing of the files made for the Project showcase, by Kartavya, Prateek, Amogh, Kyle.",
    "html_url": "https://github.com/Kartavya904/Hackathon_Project_Files",
    "language": "C#",
    "visibility": "public",
    "created_at": "2022-02-26T18:50:16Z",
    "updated_at": "2022-05-08T17:41:34Z",
    "pushed_at": "2022-02-27T15:45:49Z",
    "stargazers_count": 0,
    "forks_count": 0
  },
  {
    "name": "High-School-Sales-Management-System-Project",
    "full_name": "Kartavya904/High-School-Sales-Management-System-Project",
    "description": "This was my High School's first Full Stack Project that I did alongside my classmate.",
    "html_url": "https://github.com/Kartavya904/High-School-Sales-Management-System-Project",
    "language": "Python",
    "visibility": "public",
    "created_at": "2024-11-04T23:52:06Z",
    "updated_at": "2025-01-28T04:23:25Z",
    "pushed_at": "2024-11-04T23:53:58Z",
    "stargazers_count": 1,
    "forks_count": 0,
    "readme": "# High-School-Sales-Management-System-Project\r\n# High-School-Sales-Management-System-Project"
  },
  {
    "name": "Java-Spring-Boot-Project",
    "full_name": "Kartavya904/Java-Spring-Boot-Project",
    "description": "This is the public repo for the E-Commerce Store, I am making using Java, Spring Boot, JUnit, Docker, Kubernetes, and SQL",
    "html_url": "https://github.com/Kartavya904/Java-Spring-Boot-Project",
    "language": "Java",
    "visibility": "public",
    "created_at": "2024-09-14T01:22:06Z",
    "updated_at": "2024-09-14T04:29:17Z",
    "pushed_at": "2024-09-14T04:29:14Z",
    "stargazers_count": 0,
    "forks_count": 0,
    "readme": "# Java-Spring-Boot-Project"
  },
  {
    "name": "Kartavya-Personal-Applications",
    "full_name": "Kartavya904/Kartavya-Personal-Applications",
    "description": "This is Kartavya's Private Repository for his Application's Files.",
    "html_url": "https://github.com/Kartavya904/Kartavya-Personal-Applications",
    "visibility": "private",
    "created_at": "2025-03-26T00:33:19Z",
    "updated_at": "2025-03-26T01:14:07Z",
    "pushed_at": "2025-03-26T01:14:04Z",
    "stargazers_count": 0,
    "forks_count": 0
  },
  {
    "name": "Kartavya-Personal-College",
    "full_name": "Kartavya904/Kartavya-Personal-College",
    "description": "This is a Private (Potentially Public) Repository of Kartavya's Personal College Work",
    "html_url": "https://github.com/Kartavya904/Kartavya-Personal-College",
    "language": "C++",
    "visibility": "private",
    "created_at": "2025-03-26T01:16:30Z",
    "updated_at": "2025-03-26T02:21:48Z",
    "pushed_at": "2025-03-26T02:21:45Z",
    "stargazers_count": 0,
    "forks_count": 0
  },
  {
    "name": "Kartavya-Personal-Jobs",
    "full_name": "Kartavya904/Kartavya-Personal-Jobs",
    "description": "This is a Private repository for Kartavyas Personal Job Files.",
    "html_url": "https://github.com/Kartavya904/Kartavya-Personal-Jobs",
    "visibility": "private",
    "created_at": "2025-03-26T00:56:52Z",
    "updated_at": "2025-03-26T01:05:30Z",
    "pushed_at": "2025-03-26T00:58:22Z",
    "stargazers_count": 0,
    "forks_count": 0
  },
  {
    "name": "Kartavya-Personal-Projects",
    "full_name": "Kartavya904/Kartavya-Personal-Projects",
    "description": "This is a repository for all my personal projects",
    "html_url": "https://github.com/Kartavya904/Kartavya-Personal-Projects",
    "language": "Python",
    "visibility": "private",
    "created_at": "2024-09-10T21:18:44Z",
    "updated_at": "2024-09-10T21:27:39Z",
    "pushed_at": "2024-09-10T21:27:36Z",
    "stargazers_count": 0,
    "forks_count": 0,
    "readme": "# Kartavya-Personal-Projects"
  },
  {
    "name": "Kartavya-Portfolio",
    "full_name": "Kartavya904/Kartavya-Portfolio",
    "description": "This is a repository for my Portfolio Website",
    "html_url": "https://github.com/Kartavya904/Kartavya-Portfolio",
    "language": "HTML",
    "visibility": "public",
    "created_at": "2023-08-16T23:51:20Z",
    "updated_at": "2024-07-18T08:40:07Z",
    "pushed_at": "2024-07-18T08:40:04Z",
    "stargazers_count": 0,
    "forks_count": 0
  },
  {
    "name": "Kartavya-Portfolio-MERN",
    "full_name": "Kartavya904/Kartavya-Portfolio-MERN",
    "description": "This is the Public Library for my Portfolio Website using MongoDB to store all of my data, Express as the Backend for routing and MongoDB communication, React as the Frontend for a Dynamic Web Page and Node.js. ",
    "html_url": "https://github.com/Kartavya904/Kartavya-Portfolio-MERN",
    "language": "JavaScript",
    "visibility": "public",
    "created_at": "2024-11-05T05:32:33Z",
    "updated_at": "2025-04-11T06:03:03Z",
    "pushed_at": "2025-04-16T01:24:24Z",
    "stargazers_count": 1,
    "forks_count": 0,
    "readme": "# Kartavya Portfolio - MERN\n\nA full-stack MERN application designed to showcase Kartavya's portfolio of projects, experiences, involvements, and honors. This project uses MongoDB for data storage, Express and Node.js for server-side functionality, and React for the dynamic, user-friendly frontend.\n\n## Technologies Used\n\n- **MongoDB**: Stores and organizes portfolio data, including projects, experiences, and more.\n- **Express**: Handles backend routing and API endpoint creation for seamless data retrieval.\n- **React**: Powers the frontend to deliver interactive, responsive, and dynamic web pages.\n- **Node.js**: Serves as the runtime environment for the server and manages backend processes.\n\n## Project Structure\n\n- **backend**: Contains the Express server, API routes, and database connection logic.\n  - `models`: MongoDB models for structured data storage.\n  - `controllers`: Business logic for handling data operations.\n  - `routes`: API routes for data requests from the frontend.\n  - `config`: Database configuration.\n  \n- **frontend**: The React application that displays the portfolio data.\n  - `components`: Reusable UI components to display projects, experiences, and more.\n  - `services`: Functions to interact with backend APIs.\n  \n## Features\n\n- **Portfolio Management**: Displays categorized portfolio sections (projects, experiences, involvements, honors).\n- **Dynamic Data Retrieval**: Fetches and updates data from MongoDB in real-time through RESTful APIs.\n- **Responsive UI**: Built with React to ensure a seamless user experience on both desktop and mobile.\n\n## Getting Started\n\n### Prerequisites\n\nEnsure you have the following installed:\n- [Node.js](https://nodejs.org/)\n- [MongoDB Atlas Account](https://www.mongodb.com/cloud/atlas) (or local MongoDB setup)\n\n### Installation\n\n1. Clone the repository:\n   git clone https://github.com/your-username/Kartavya-Portfolio-MERN.git\n   cd Kartavya-Portfolio-MERN\n2. Set up environment variables:\n    In the backend folder, create a .env file and add:\n        PORT=5000\n        MONGO_URI=\"my-mongodb uri\"\n3. Install dependencies for both backend and frontend:\n    #### Backend\n        cd backend\n        npm install\n    #### Frontend\n        cd ../frontend\n        npm install\n\n### Running the Application\n\n1. Start the backend server first: (it messes up the other way due to mongodb connection issue!)\n    cd backend\n    npm start\n2. Start the frontend React app:\n    cd ../frontend\n    npm start\n3. Visit http://localhost:3000 in your browser to view the application."
  },
  {
    "name": "Kartavya904",
    "full_name": "Kartavya904/Kartavya904",
    "description": "This is the public repository for my GitHub Profile",
    "html_url": "https://github.com/Kartavya904/Kartavya904",
    "visibility": "public",
    "created_at": "2024-09-11T23:12:34Z",
    "updated_at": "2024-12-21T10:11:03Z",
    "pushed_at": "2024-12-21T10:11:00Z",
    "stargazers_count": 0,
    "forks_count": 0,
    "readme": "<p align=\"center\">\n  <a href=\"https://www.kartavya-singh.com/\"><img src=\"https://readme-typing-svg.demolab.com?font=Fira+Code&weight=800&size=30&duration=3000&pause=1000&color=F75C7E&center=true&vCenter=true&repeat=false&width=435&lines=Kartavya+Singh\" alt=\"Typing SVG\" /></a>\n  <img src=\"https://readme-typing-svg.demolab.com?font=Fira+Code&pause=1000&center=true&color=F75C7E&repeat=true&width=600&height=45&vCenter=true&size=24&lines=Hello+World!;Experienced+Full+Stack+Developer;Crafting+AI-Powered+Solutions;Mastering+Data+Science+and+Analytics;Developing+with+Curiosity+and+Expertise;Always+Learning%2C+Always+Innovating\" alt=\"Typing SVG\" />\n</p>\n\n**`Innovative Full Stack Software Engineer (Full Stack Development | AI Applications | Data Science)`**\n\nI’m Kartavya Singh, a Computer Science student at the University of Cincinnati with a passion for coding solutions that excite me and improve everyday life with a deep curiosity about the world around me. I thrive on learning, whether it's understanding fundamental concepts or diving into the complexities of cutting-edge technology. My approach is driven by a desire to explore how things work and how I can use code to make them better. This mindset powers my innovative thinking, which I apply to both personal projects and professional endeavors. I enjoy working on diverse challenges, including hackathons, my focus is on consistently expanding my knowledge and applying it to develop meaningful solutions and real-world application. I believe that learning is a lifelong journey, and I approach every opportunity with a mindset of growth and discovery.\n<p align=\"center\">\n  <a href=\"https://www.kartavya-singh.com/\" target=\"_blank\"><img src=\"https://img.shields.io/badge/Website-1572B6?style=for-the-badge&logo=google&logoColor=white\" alt=\"Website\"></a>\n  <a href=\"https://devpost.com/Kartavya904\" target=\"_blank\"><img src=\"https://img.shields.io/badge/DevPost-FF6C37?style=for-the-badge&logo=devpost&logoColor=white\" alt=\"DevPost\"></a>\n  <a href=\"https://www.linkedin.com/in/kartavya-singh-singhk6\" target=\"_blank\"><img src=\"https://img.shields.io/badge/LinkedIn-0A66C2?style=for-the-badge&logo=linkedin&logoColor=white\" alt=\"LinkedIn\"></a>\n  <a href=\"mailto:singhk6@mail.uc.edu\"><img src=\"https://img.shields.io/badge/Email-D14836?style=for-the-badge&logo=gmail&logoColor=white\" alt=\"Email\"></a>\n  <a href=\"https://mailuc-my.sharepoint.com/:b:/g/personal/singhk6_mail_uc_edu/Efzdo8ozdSpInJYqJzLLqkcBW7n1fw4DKwYT2GdOkuByVg\" target=\"_blank\"><img src=\"https://img.shields.io/badge/Download%20Resume-4CAF50?style=for-the-badge&logo=adobeacrobatreader&logoColor=white\" alt=\"Download Resume\"></a>\n</p>\n<details open>\n  <summary><h2>📊 GitHub Stats & Activity</h2></summary>\n    <a href=\"https://github.com/Kartavya904\"><img src=\"https://github-readme-stats.vercel.app/api/?username=Kartavya904&show_icons=true&include_all_commits=true&count_private=true&theme=react&hide_border=true&bg_color=1F222E&title_color=F85D7F&icon_color=F8D866\" alt=\"Kartavya's GitHub stats\" height=\"192px\"/></a>\n    <a href=\"https://github.com/Kartavya904\" id=\"topLang\"><img src=\"https://github-readme-stats.vercel.app/api/top-langs/?username=Kartavya904&langs_count=8&layout=compact&theme=react&hide_border=true&bg_color=1F222E&title_color=F85D7F&icon_color=F8D866&hide=Jupyter%20Notebook,Roff\" alt=\"Kartavya's top languages\" height=\"192px\"/></a>\n    </br>\n    <b>Note:</b> Top languages is only a metric of the languages my public code consists of and doesn't reflect experience or skill level.\n    <a href=\"https://github.com/Kartavya904/github-readme-activity-graph\"><img alt=\"Kartavya's Activity Graph\" src=\"https://github-readme-activity-graph.vercel.app/graph/?username=Kartavya904&bg_color=1F222E&color=F8D866&line=F85D7F&point=FFFFFF&hide_border=true\" /></a>\n</details>\n<details open>\n  <summary><h2>🛠️ Languages and Tools</h2></summary>\n  <h3>Proficient</h3><p align=\"left\">\n    <img src=\"https://img.shields.io/badge/JavaScript-F7DF1E?style=for-the-badge&logo=javascript&logoColor=black\" alt=\"JavaScript\"/>\n    <img src=\"https://img.shields.io/badge/Python-3776AB?style=for-the-badge&logo=python&logoColor=white\" alt=\"Python\"/>\n    <img src=\"https://img.shields.io/badge/Java-007396?style=for-the-badge&logo=java&logoColor=white\" alt=\"Java\"/>\n    <img src=\"https://img.shields.io/badge/C%23-239120?style=for-the-badge&logo=c-sharp&logoColor=white\" alt=\"C#\"/>\n    <img src=\"https://img.shields.io/badge/C++-00599C?style=for-the-badge&logo=c%2B%2B&logoColor=white\" alt=\"C++\"/>\n    <img src=\"https://img.shields.io/badge/HTML-E34F26?style=for-the-badge&logo=html5&logoColor=white\" alt=\"HTML\"/>\n    <img src=\"https://img.shields.io/badge/CSS-1572B6?style=for-the-badge&logo=css3&logoColor=white\" alt=\"CSS\"/>\n    <img src=\"https://img.shields.io/badge/Flask-000000?style=for-the-badge&logo=flask&logoColor=white\" alt=\"Flask\"/>\n    <img src=\"https://img.shields.io/badge/SQL-4479A1?style=for-the-badge&logo=postgresql&logoColor=white\" alt=\"SQL\"/>\n    <img src=\"https://img.shields.io/badge/MongoDB-47A248?style=for-the-badge&logo=mongodb&logoColor=white\" alt=\"MongoDB\"/>\n    <img src=\"https://img.shields.io/badge/React-20232A?style=for-the-badge&logo=react&logoColor=61DAFB\" alt=\"React\"/>\n    <img src=\"https://img.shields.io/badge/.NET-512BD4?style=for-the-badge&logo=dotnet&logoColor=white\" alt=\".NET\"/>\n    <img src=\"https://img.shields.io/badge/TypeScript-007ACC?style=for-the-badge&logo=typescript&logoColor=white\" alt=\"TypeScript\"/>\n    <img src=\"https://img.shields.io/badge/Docker-2496ED?style=for-the-badge&logo=docker&logoColor=white\" alt=\"Docker\"/>\n    <img src=\"https://img.shields.io/badge/JUnit-25A162?style=for-the-badge&logo=junit5&logoColor=white\" alt=\"JUnit\"/>\n    <img src=\"https://img.shields.io/badge/Spring%20Boot-6DB33F?style=for-the-badge&logo=springboot&logoColor=white\" alt=\"Spring Boot\"/>\n    <img src=\"https://img.shields.io/badge/PowerBI-F2C811?style=for-the-badge&logo=powerbi&logoColor=black\" alt=\"PowerBI\"/>\n    <img src=\"https://img.shields.io/badge/Data%20Structures%20and%20Algorithms-00897B?style=for-the-badge&logo=data&logoColor=white\" alt=\"Data Structures and Algorithms\"/>\n    <img src=\"https://img.shields.io/badge/Discord.js-5865F2?style=for-the-badge&logo=discord&logoColor=white\" alt=\"Discord.js\"/>\n    <img src=\"https://img.shields.io/badge/Reinforcement%20Learning-4285F4?style=for-the-badge&logo=brain&logoColor=white\" alt=\"Reinforcement Learning\"/>\n    <img src=\"https://img.shields.io/badge/NLP-FF6F00?style=for-the-badge&logo=nlp&logoColor=white\" alt=\"NLP\"/>\n  </p><h3>Intermediate</h3><p align=\"left\">\n    <img src=\"https://img.shields.io/badge/TensorFlow-FF6F00?style=for-the-badge&logo=tensorflow&logoColor=white\" alt=\"TensorFlow\"/>\n    <img src=\"https://img.shields.io/badge/Unity-000000?style=for-the-badge&logo=unity&logoColor=white\" alt=\"Unity\"/>\n    <img src=\"https://img.shields.io/badge/Selenium-43B02A?style=for-the-badge&logo=selenium&logoColor=white\" alt=\"Selenium\"/>\n    <img src=\"https://img.shields.io/badge/Kubernetes-326CE5?style=for-the-badge&logo=kubernetes&logoColor=white\" alt=\"Kubernetes\"/>\n    <img src=\"https://img.shields.io/badge/Azure-0078D4?style=for-the-badge&logo=microsoftazure&logoColor=white\" alt=\"Azure\"/>\n    <img src=\"https://img.shields.io/badge/Google%20Cloud-4285F4?style=for-the-badge&logo=googlecloud&logoColor=white\" alt=\"Google Cloud\"/>\n    <img src=\"https://img.shields.io/badge/Django-092E20?style=for-the-badge&logo=django&logoColor=white\" alt=\"Django\"/>\n    <img src=\"https://img.shields.io/badge/OpenCV-5C3EE8?style=for-the-badge&logo=opencv&logoColor=white\" alt=\"OpenCV\"/>\n    <img src=\"https://img.shields.io/badge/GitLab-FC6D26?style=for-the-badge&logo=gitlab&logoColor=white\" alt=\"GitLab\"/>\n    <img src=\"https://img.shields.io/badge/Next.js-000000?style=for-the-badge&logo=next.js&logoColor=white\" alt=\"Next.js\"/>\n    <img src=\"https://img.shields.io/badge/PySpark-E25A1C?style=for-the-badge&logo=apachespark&logoColor=white\" alt=\"PySpark\"/>\n    <img src=\"https://img.shields.io/badge/LabView-FFDB00?style=for-the-badge&logo=national-instruments&logoColor=white\" alt=\"LabView\"/>\n    <img src=\"https://img.shields.io/badge/Pandas-150458?style=for-the-badge&logo=pandas&logoColor=white\" alt=\"Pandas\"/>\n    <img src=\"https://img.shields.io/badge/Matplotlib-11557C?style=for-the-badge&logo=python&logoColor=white\" alt=\"Matplotlib\"/>\n    <img src=\"https://img.shields.io/badge/Tableau-E97627?style=for-the-badge&logo=tableau&logoColor=white\" alt=\"Tableau\"/>\n    <img src=\"https://img.shields.io/badge/Django-092E20?style=for-the-badge&logo=django&logoColor=white\" alt=\"Django\"/>\n    <img src=\"https://img.shields.io/badge/Deep%20Learning%20Architectures-FF6F00?style=for-the-badge&logo=neuralnetwork&logoColor=white\" alt=\"Deep Learning Architectures\"/>\n    <img src=\"https://img.shields.io/badge/PySpark-E25A1C?style=for-the-badge&logo=apachespark&logoColor=white\" alt=\"PySpark\"/>\n    <img src=\"https://img.shields.io/badge/NumPy-013243?style=for-the-badge&logo=numpy&logoColor=white\" alt=\"NumPy\"/>\n  </p><h3>Beginner</h3><p align=\"left\">\n    <img src=\"https://img.shields.io/badge/Rust-000000?style=for-the-badge&logo=rust&logoColor=white\" alt=\"Rust\"/>\n    <img src=\"https://img.shields.io/badge/Go-00ADD8?style=for-the-badge&logo=go&logoColor=white\" alt=\"Go\"/>\n    <img src=\"https://img.shields.io/badge/Swift-FA7343?style=for-the-badge&logo=swift&logoColor=white\" alt=\"Swift\"/>\n    <img src=\"https://img.shields.io/badge/AutoML-FF6F00?style=for-the-badge&logo=automl&logoColor=white\" alt=\"AutoML\"/>\n    <img src=\"https://img.shields.io/badge/Jenkins-D24939?style=for-the-badge&logo=jenkins&logoColor=white\" alt=\"Jenkins\"/>\n    <img src=\"https://img.shields.io/badge/Quantum%20Computing-0066FF?style=for-the-badge&logo=quantumcomputing&logoColor=white\" alt=\"Quantum Computing\"/>\n    <img src=\"https://img.shields.io/badge/VanillaJS-F7DF1E?style=for-the-badge&logo=javascript&logoColor=black\" alt=\"Vanilla.js\"/>\n    <img src=\"https://img.shields.io/badge/XML-FF6600?style=for-the-badge&logo=xml&logoColor=white\" alt=\"XML\"/>\n    <img src=\"https://img.shields.io/badge/Hive-FDEE21?style=for-the-badge&logo=apachehive&logoColor=black\" alt=\"Hive (PyHive)\"/>\n  </p>\n</details>\n<details open>\n  <summary><h2>📘 My Top Open Source Projects</h2></summary>\n  <p align=\"left\">\n    <a href=\"https://github.com/Kartavya904/2024-Future-of-Data-Hackathon\"><img width=\"278\" align=\"center\" src=\"https://github-readme-stats.vercel.app/api/pin/?username=Kartavya904&repo=2024-Future-of-Data-Hackathon&theme=react&bg_color=1F222E&title_color=F85D7F&hide_border=true&icon_color=F8D866&show_icons=false\" alt=\"2024 Future of Data Hackathon\" /></a>\n    <a href=\"https://github.com/Kartavya904/2024-RevolutionUC-Hackathon\"><img width=\"278\" align=\"center\" src=\"https://github-readme-stats.vercel.app/api/pin/?username=Kartavya904&repo=2024-RevolutionUC-Hackathon&theme=react&bg_color=1F222E&title_color=F85D7F&hide_border=true&icon_color=F8D866&show_icons=false\" alt=\"2024 RevolutionUC Hackathon\" /></a>\n    <a href=\"https://github.com/Kartavya904/2023-MakeUC-Hackathon\"><img width=\"278\" align=\"center\" src=\"https://github-readme-stats.vercel.app/api/pin/?username=Kartavya904&repo=2023-MakeUC-Hackathon&theme=react&bg_color=1F222E&title_color=F85D7F&hide_border=true&icon_color=F8D866&show_icons=false\" alt=\"2023 MakeUC Hackathon\" /></a>\n    <a href=\"https://github.com/Kartavya904/Hackathon_Project_Files\"><img width=\"278\" align=\"center\" src=\"https://github-readme-stats.vercel.app/api/pin/?username=Kartavya904&repo=Hackathon_Project_Files&theme=react&bg_color=1F222E&title_color=F85D7F&hide_border=true&icon_color=F8D866&show_icons=false\" alt=\"Hackathon Project Files\" /></a>\n    <a href=\"https://github.com/Kartavya904/Robot-Codes\"><img width=\"278\" align=\"center\" src=\"https://github-readme-stats.vercel.app/api/pin/?username=Kartavya904&repo=Robot-Codes&theme=react&bg_color=1F222E&title_color=F85D7F&hide_border=true&icon_color=F8D866&show_icons=false\" alt=\"Robot Codes\" /></a>\n    <a href=\"https://github.com/Kartavya904/AniRaid_CD-Bot-Latest\"><img width=\"278\" align=\"center\" src=\"https://github-readme-stats.vercel.app/api/pin/?username=Kartavya904&repo=AniRaid_CD-Bot-Latest&theme=react&bg_color=1F222E&title_color=F85D7F&hide_border=true&icon_color=F8D866&show_icons=false\" alt=\"AniRaid CD Bot Latest\" /></a>\n  </p>\n  <p align=\"center\">\n    <a href=\"https://github.com/Kartavya904?tab=repositories&sort=stargazers\"><img alt=\"All Repositories\" title=\"All Repositories\" src=\"https://custom-icon-badges.demolab.com/badge/-Click%20Here%20For%20All%20My%20Repos-1F222E?style=for-the-badge&logoColor=white&logo=repo\"/></a>\n  </p>\n</details>\n<details open>\n  <summary><h2>🚀 Live Demo for Projects</h2></summary>\n  <p>Below are some live demos of my projects. Click on the thumbnail to view the project on DevPost!</p>\n  <p align=\"left\">\n    <a href=\"https://devpost.com/software/finvest-budget-smart-invest-sharp\" target=\"_blank\"><img src=\"https://ytcards.demolab.com/?id=tORwdk8SPFw&title=FinVest+Budget+Smart+Invest+Sharp&lang=en&timestamp=1696868769&background_color=%230d1117&title_color=%23ffffff&stats_color=%23dedede&max_title_lines=2&width=250&border_radius=5&duration=172\" alt=\"FinVest Budget Smart Invest Sharp\" title=\"FinVest Budget Smart Invest Sharp\"></a>\n    <a href=\"https://devpost.com/software/faunafinder-ai-powered-animal-breed-recognition\" target=\"_blank\"><img src=\"https://ytcards.demolab.com/?id=2KGRbdVTbyU&title=FaunaFinder+AI+Powered+Animal+Breed+Recognition&lang=en&timestamp=1696868769&background_color=%230d1117&title_color=%23ffffff&stats_color=%23dedede&max_title_lines=2&width=250&border_radius=5&duration=130\" alt=\"FaunaFinder AI Powered Animal Breed Recognition\" title=\"FaunaFinder AI Powered Animal Breed Recognition\"></a>\n    <a href=\"https://devpost.com/software/bearchat\" target=\"_blank\"><img src=\"https://ytcards.demolab.com/?id=oz7M1XptE8Q&title=BearChat&lang=en&timestamp=1696868769&background_color=%230d1117&title_color=%23ffffff&stats_color=%23dedede&max_title_lines=2&width=250&border_radius=5&duration=152\" alt=\"BearChat\" title=\"BearChat\"></a>\n    <a href=\"https://devpost.com/software/virtual-office-space\" target=\"_blank\"><img src=\"https://ytcards.demolab.com/?id=oU7lyxzS4Bo&title=Virtual+Office+Space&lang=en&timestamp=1696868769&background_color=%230d1117&title_color=%23ffffff&stats_color=%23dedede&max_title_lines=2&width=250&border_radius=5&duration=155\" alt=\"Virtual Office Space\" title=\"Virtual Office Space\"></a>\n    <a href=\"https://devpost.com/software/healthsphere\" target=\"_blank\"><img src=\"https://ytcards.demolab.com/?id=K74ENN8pJXU&title=HealthSphere&lang=en&timestamp=1696868769&background_color=%230d1117&title_color=%23ffffff&stats_color=%23dedede&max_title_lines=2&width=250&border_radius=5&duration=142\" alt=\"HealthSphere\" title=\"HealthSphere\"></a>\n    <a href=\"https://devpost.com/software/librestricted\" target=\"_blank\"><img src=\"https://ytcards.demolab.com/?id=4jCCUUBLt74&title=LibRestricted&lang=en&timestamp=1696868769&background_color=%230d1117&title_color=%23ffffff&stats_color=%23dedede&max_title_lines=2&width=250&border_radius=5&duration=160\" alt=\"LibRestricted\" title=\"LibRestricted\"></a>\n  </p>\n</details>"
  },
  {
    "name": "LibRestricted-MakeUC2022",
    "full_name": "Kartavya904/LibRestricted-MakeUC2022",
    "description": "A project submission for MakeUC 2022.",
    "html_url": "https://github.com/Kartavya904/LibRestricted-MakeUC2022",
    "visibility": "public",
    "created_at": "2024-11-05T04:27:47Z",
    "updated_at": "2024-11-05T04:27:47Z",
    "pushed_at": "2022-10-23T14:22:33Z",
    "stargazers_count": 0,
    "forks_count": 0,
    "readme": "# LibRestricted\n A project submission for MakeUC 2022.\n\nThis project was made in Unity Editor version 2021.3.11f1"
  },
  {
    "name": "LWC-ElasticSearch-Project-Explorer",
    "full_name": "Kartavya904/LWC-ElasticSearch-Project-Explorer",
    "description": "This is the Private Repository for the Live Well Collaborative Project Explorer using Elastic Search. Please head over to Issues to add features/implementations/queries/concerns/others.",
    "html_url": "https://github.com/Kartavya904/LWC-ElasticSearch-Project-Explorer",
    "language": "JavaScript",
    "visibility": "private",
    "created_at": "2025-01-21T20:19:15Z",
    "updated_at": "2025-04-17T20:30:51Z",
    "pushed_at": "2025-04-17T20:30:48Z",
    "stargazers_count": 0,
    "forks_count": 0,
    "readme": "# LWC Project Explorer - Elastic Search\n\nA comprehensive full-stack application demonstrating how to build a scalable Elastic Search solution using **React** for the frontend, **Flask (Python)** for the backend, and **PostgreSQL** for data management. This project allows users to sign up, log in, and access a sleek dashboard integrated with an Elastic Search layer, facilitating advanced search functionalities. \n\n## Technologies Used\n\n- **PostgreSQL**: Manages and organizes structured data, including user credentials and search-related information, ensuring data integrity and scalability.\n- **Flask**: Serves as the backend framework to create RESTful APIs, manage user authentication, and integrate with the Elastic Search layer.\n- **Elastic Search**: Provides powerful search capabilities, enabling fast and efficient data querying and retrieval.\n- **React**: Delivers an interactive, responsive, and modern user interface for seamless user experiences.\n- **Node.js** (for frontend tooling): Used as a runtime environment to manage development dependencies and build processes.\n\n## Project Structure\n\n- **backend**: Contains the Flask server, API endpoints, and database connection logic.\n  - `api`:\n    - `DatabaseManager`: Handles database connection and operations with PostgreSQL.\n    - `ElasticSearchAPI.py`: Manages the integration with the Elastic Search layer.\n    - `UserManagement`: Contains user authentication endpoints (`LoginAPI.py`, `SignUpAPI.py`).\n    - `AdminController`: Contains admin controller for administration privileges\n  - `app.py`: Main entry point for starting the Flask application.\n  - `venv`: Contains the Virtual Environment with required dependencies.\n  - `.env`: Environment variables for database and Elastic Search configuration.\n\n- **frontend**: The React application that provides the user interface.\n  - `components`: Reusable UI components such as `DashBoard`, `HomePage`, `Footer`, and `Header`.\n  - `styles`: CSS files for styling the UI components.\n  - `assets`: Contains static assets like images or fonts.\n  - `services`: Functions to communicate with the backend APIs.\n  - `.env`: Environment variables for backend connection URI & More.\n\n- **database**: PostgreSQL serves as the primary data store, managing user credentials and search-related data.\n\n  \n<!-- ## Features\n\n- **User Authentication**: Secure signup and login functionality to manage user access.\n- **Elastic Search Integration**: Enables powerful and efficient search capabilities for retrieving relevant data quickly.\n- **Dynamic Data Retrieval**: Fetches and updates data from the PostgreSQL database in real-time through RESTful APIs.\n- **Responsive Dashboard**: Built with React to provide a seamless and interactive user experience on both desktop and mobile devices.\n- **Scalable Architecture**: Backend powered by Flask, integrated with PostgreSQL and Elastic Search, designed for scalability and high performance. -->\n\n\n## Tech Setup\n\n### Database (Important) : PostgreSQL \n- One Time Set-up\n- Primary Technology: **PostgreSQL**\n- Usage\n  - Storing User Credentials\n  - Managing Search-Related Data\n  - Storing Project and Sponsor Related Information\n  - Integration with Flask via `psycopg2` as the Adapter\n\n#### Setup\n1. **Install PostgreSQL** on your local machine (or use a hosted service).\n    - Download and install PostgreSQL from the [official website](https://www.postgresql.org/download/).\n    - Open a PSQL Tool For the rest of the setup\n2. Create the Server `LiveWellCollaborative`:\n    - Right-click on the Servers, and click Register > Server\n    - **General**:\n      - Name: `LiveWellCollaborative`\n    - **Connection**:\n      - Host Name/Address: `localhost` or `your_address`\n      - Port: `5432` or `your_port`\n      - Username: `postgres`\n      - Password: `your_password`\n    - **Create and Refresh**!\n3. Create the User `LWC`\n    - Right-click on the `LiveWellCollaborative` Server, and click Create > `Login/Group Role...`\n    - **General**:\n      - Name: `LWC`\n    - **Definition**:\n      - Password: `your_password`\n    - **Privileges**:\n      - **ALL!!!**\n    - **Create and Refresh**!\n4. Create the Database `LWC_DB`\n    - Right-click on the Databases, and click Create > Database\n    - **General**:\n      - Database: `LWC_DB`\n      - Owner: `LWC`\n    - **Create and Refresh**!\n5. Select the Database to work on:\n    - Right-click on the Database `LWC_DB`, and click **`PSQL Tool`**\n\n    ```bash\n    LWC_DB=# \\c LWC_DB LWC;\n    ```\n5. Create the required tables:\n    - Create UserTable;\n    - Create ProjectTable;\n    - Create SponsorTable;\n    - Create ConversationTable;\n    - Create Other Tables as needed!\n6. Update the `POSTGRES_URI Key`\n    ```base\n    POSTGRES_URI=postgresql://<username>:<password>@<host>:<port>/<database_name>\n    ```\n7. **Migrations & Tables**: Run your preferred migration tool or SQL script to create the necessary tables.\n\n### Your Database is now setup!\n\n---\n\n### Backend: Flask + Python\n- **Primary Language**: Python 3.9+\n- **Framework**: Flask\n- **Main Features**:\n  - User Authentication (Sign Up & Login)\n  - Connection to PostgreSQL Database\n  - Elastic Search API Integration\n  - Admin Controls API Integration\n\n#### Setup\n1. **Clone the Respository & Navigate to the `backend` Folder**\n  - Clone the Respository by using the link to the repository.\n  - Navigate to the Backend Directory: Once cloned, run this command to move into the backend folder:\n    ```bash\n    cd backend\n    ```\n2. **Create and Activate a Virtual Environment**:  \n   ```bash\n   # Create venv - Make sure the last argument is venv!\n   python -m venv venv\n   \n   # Activate venv On Mac:\n   source venv/bin/activate\n   \n   # Activate venv On Windows:\n   venv\\Scripts\\activate\n   ```\n3. **Install Dependencies**:\n    ```bash\n    pip install -r requirements.txt\n    ```\n4. **Configure Environment Variables (in `.env` file)**:\n    - Create a `.env` file:\n        ```bash\n        echo \"POSTGRES_URI=\" >> .env\n        ```\n    - Create the `POSTGRES_URI`\n        ```bash\n        POSTGRES_URI=postgresql://<username>:<password>@<host>:<port>/<database_name>\n        ```\n5. **Run the Application**:\n    - You can run the application using one of the following commands: \n        ```bash\n        python app.py  # Preferred method\n        ```\n        or, if the above command returns an error\n        ```bash\n        flask run\n        ```\n    - At runtime on localhost, your Flask backend will be accessible at `http://127.0.0.1:5000`\n\n### Your Backend is ready and running\n\n---\n\n### Frontend: React\n- **Primary Language**: JavaScript (ES6+)\n- **Framework**: React (Create React App)\n- **Main Features**:\n    - Responsive and Modern UI\n    - Integration with Flask API\n    - Easy Navigation & Dashboard Display\n    - Styling with CSS Modules\n\n#### Setup\n1. **Navigate to the `frontend` Folder**\n  \n  - Navigate to the Frontend Directory: Once cloned, run this command to move into the frontend folder:\n    ```bash\n    cd frontend\n    ```\n2. **Install Dependencies**:\n    ```bash\n    npm install\n    ```\n3. **Configure Environment Variables (in `.env` file)**:\n    - Create a `.env` file:\n        ```bash\n        echo \"POSTGRES_URI=\" >> .env\n        ```\n    - Create the `POSTGRES_URI`\n        ```bash\n        REACT_APP_BACKEND_URL=http://127.0.0.1:5000\n        ```\n4. **Start the Development Server**:\n    - You can run the application using the following command: \n        ```bash\n        npm start\n        ```\n    - At runtime on localhost, your React App frontendd will be served at `http://localhost:3000` or `http://127.0.0.1:3000`\n\n### Your Frontend is ready and the app is now running!"
  },
  {
    "name": "MarketPulse-Smart-AI-Driven-Market-Signals",
    "full_name": "Kartavya904/MarketPulse-Smart-AI-Driven-Market-Signals",
    "description": "MarketPulse is a high-performance, real-time market analytics platform built with GoLang, designed for stock and futures traders. The platform aggregates critical financial data, AI-powered sentiment analysis, real-time market signals, and comprehensive news summaries, empowering traders to make informed investment decisions quickly & confidently.",
    "html_url": "https://github.com/Kartavya904/MarketPulse-Smart-AI-Driven-Market-Signals",
    "language": "JavaScript",
    "visibility": "public",
    "created_at": "2025-03-22T01:13:51Z",
    "updated_at": "2025-03-22T03:29:38Z",
    "pushed_at": "2025-03-22T03:28:06Z",
    "stargazers_count": 1,
    "forks_count": 0,
    "readme": "# 📈 MarketPulse: Smart AI-Driven Market Signals\n\n**Intelligent Stock & Futures Trading Insights Aggregator**\n\n---\n\n## 🚀 Overview\n\nMarketPulse is a high-performance, real-time market analytics platform built with GoLang, designed for stock and futures traders. The platform aggregates critical financial data, AI-powered sentiment analysis, real-time market signals, and comprehensive news summaries, empowering traders to make informed investment decisions quickly and confidently.\n\n---\n\n## ✨ Features\n\n### ✅ Intuitive Authentication\n\n- Secure, simple login interface\n- Single-account authentication (expandable for multi-user access)\n\n### 📊 Dynamic Asset Tracking\n\n- Easily add and manage multiple assets (Stocks, Futures)\n- Customizable individual dashboards for each asset\n\n### 💡 Insights & Analysis\n\n- **Asset Summary:** Comprehensive fundamental and technical indicators\n- **Sentiment Analysis:** AI-based news sentiment (Positive, Negative, Neutral)\n- **Investment Signal:** Clear recommendations (Strong Sell → Strong Buy)\n- **Trusted News Aggregation:** Real-time scraping of major news outlets, social media, and forums with trust rating scores (0-100)\n\n### 📉 Real-Time Trading Signals\n\n- Accurate, real-time buy/sell signals\n- Comprehensive real-time data visualization (charts and graphs)\n- Optimized timing recommendations for market entry/exit\n\n---\n\n## 🛠️ Tech Stack\n\n| Layer                  | Technology                                     |\n| ---------------------- | ---------------------------------------------- |\n| **Frontend**           | React.js, Tailwind CSS, Chart.js               |\n| **Backend**            | Go (Gin, Fiber, Gorilla Mux)                   |\n| **Concurrency**        | Goroutines, Channels                           |\n| **Web Scraping**       | Colly, Goquery                                 |\n| **AI Integration**     | TensorFlow Go, ONNX Runtime                    |\n| **Messaging/Queue**    | Kafka, RabbitMQ                                |\n| **Storage & Search**   | PostgreSQL, Elasticsearch, Redis               |\n| **Authentication**     | JWT, OAuth2                                    |\n| **Observability**      | Prometheus, Grafana, OpenTelemetry, Zap/Logrus |\n| **Deployment & CI/CD** | Docker, Kubernetes, GitHub Actions             |\n\n---\n\n## 📸 Project Structure\n\n```\nmarketpulse/\n├── backend/\n│   ├── api/\n│   ├── scraper/\n│   ├── sentiment/\n│   ├── models/\n│   └── auth/\n├── frontend/\n│   ├── public/\n│   └── src/\n│       ├── components/\n│       ├── pages/\n│       ├── utils/\n│       └── App.js\n├── deployments/\n├── scripts/\n├── Dockerfile\n├── docker-compose.yml\n└── README.md\n```\n\n---\n\n## 🚧 Getting Started\n\n### Prerequisites\n\n- [Go](https://golang.org/) (>=1.20)\n- [Node.js](https://nodejs.org/) (>=16.x)\n- [Docker](https://www.docker.com/)\n\n### Installation\n\n```bash\n# Clone the repository\ngit clone https://github.com/yourusername/marketpulse.git\n\n# Backend setup\ncd backend\ngo mod tidy\ngo run main.go\n\n# Frontend setup\ncd ../frontend\nnpm install\nnpm run dev\n```\n\n### Docker Setup\n\n```bash\n# Build and start containers\ndocker-compose up --build\n```\n\n---\n\n## 📌 Future Enhancements\n\n- Multi-user authentication\n- Expand to other financial instruments (Crypto, Options, Forex)\n- Enhanced predictive modeling\n\n---\n\n## 🤝 Contributing\n\nContributions, feedback, and suggestions are welcome. Please feel free to submit a pull request or open an issue.\n\n---\n\n## 📧 Contact\n\nCreated with 💙 by [Kartavya Singh](https://kartavya-singh.com)\n\nEmail: singhk6@mail.uc.edu | LinkedIn: [Kartavya Singh](https://www.linkedin.com/in/kartavya-singh-singhk6)"
  },
  {
    "name": "medava",
    "full_name": "Kartavya904/medava",
    "description": "Describing the creation of a medical supply chain simulation using Java.",
    "html_url": "https://github.com/Kartavya904/medava",
    "visibility": "public",
    "created_at": "2023-11-20T02:10:51Z",
    "updated_at": "2023-11-20T02:10:51Z",
    "pushed_at": "2023-11-13T21:41:21Z",
    "stargazers_count": 0,
    "forks_count": 0,
    "readme": "## Medava\n\nJava is an amazing language. The original designers, James Gosling, Bill Joy and Guy Steele, described it as, \"... a general-purpose concurrent class-based object-oriented programming language\" (sic). By now, as programming-language enthusiasts, you should recognize those words. In particular, we are focused here on the fact that they describe Java as a class-based (ie, *not* prototypal), object-oriented programming language. By virtue of its support for OOP and the criteria we set for such a language to be considered such a language, we can assume that Java supports\n\n1. The *abstraction* of abstract data types (ADTs),\n2. Inheritance\n3. Virtual methods (*and* open recursion).\n\nIn this mini assignment we will explore how Java meets each of these criteria and learn how Java allows the programmer to employ reflection, another feature often present in object-oriented programming languages.\n\nAs for its support for typing, the language specification says it well:\n\n> The Java programming language is a statically typed language, which means that every variable and every expression has a type that is known at compile time.\n\n> The Java programming language is also a strongly typed language, because types limit the values that a variable ... can hold or that an expression can produce, limit the operations supported on those values, and determine the meaning of the operations. Strong static typing helps detect errors at compile time.\n\nAnd yet Java is known for its dynamism. This mini assignment will also explore the tension that exists in Java as a result -- the tension between the language's dynamism and its strong-typing constraints.\n\n\n## Java is *Not* JavaScript\n\nTo start, let's be very, very clear: Java is *not at all* related to JavaScript. JavaScript is a language that is specified through a group in the EU formerly known through the acronym ECMA which stood for European Computer Manufacturers Association. In 1994 the organization dropped its primary focus on Europe and became an international body. It became officially known as Ecma, which is *not* an acronym (in the same way that [KFC and Kentucky Fried Chicken may or may not be the same thing](https://www.snopes.com/fact-check/kfc-and-fried/)). The group's charter is to standardize information and computer systems. (This information is derived from the [Ecma website](https://www.ecma-international.org/about-ecma/history/)) As such, it is more accurate to refer to JavaScript as [ECMAScript](https://tc39.es/ecma262/).\n\n The original developer of JavaScript (Brandon Eich) was working for Netscape when he created the language and he is quick to remind everyone that the name JavaScript was just a [\"marketing scam\"](https://www.youtube.com/watch?v=WqMbzVWIAjY). The original code name for the language was Mocha and the second name was LiveScript (yes, I wrote code in LiveScript!). Brendan recalls that the goal for \"Marc (Andreeson, founder of Netscape) and Bill (Joy, one of the founders of Sun Microsystems and original developer of Vi) was to make [JavaScript] the sidekick language to Java\" [ref](https://www.youtube.com/watch?v=WqMbzVWIAjY).\n\n In other words, beyond marketing and hype, Java and ECMAScript, nee JavaScript, have nothing to do with one another and are completely independent languages.\n\n## Prerequisites:\n\nFirst things first: Clone this repository to your development machine! You are all experts at this by now, I am sure, but there are great resources online for learning/using `git` if you want to dig deeper: [Resource](https://git-scm.com/download/mac), [Resource](https://gitforwindows.org/), [Resource](https://git-scm.com/docs/gittutorial).\n\nNext, you will need a Java SDK and Maven to complete this assignment. I *highly* recommend that you use VS Code (whether you are on Windows, macOS or Linux). There are instructions for configuring the IDE on those platforms [online](https://code.visualstudio.com/docs/java/java-build). If you choose not to use VS Code, there is plenty of documentation for configuring [your](https://docs.oracle.com/en/java/javase/15/install/installation-jdk-macos.html) [environment](https://maven.apache.org/install.html) [online](https://docs.oracle.com/en/java/javase/11/install/installation-jdk-microsoft-windows-platforms.html).\n\nA system development kit (SDK) contains the pieces that you need to develop in a particular toolchain, in this case Java. The Java SDK is known as the Java Development Kit (the JDK). The JDK gives you the ability to *write* and *compile* Java code. However, it does *not* give you the ability to *execute* Java code. The tool(s) that execute Java programs are known as Java Runtime Environments (JREs). Those tools are \"sold separately\", as they say. What do you think might be the reason why those two groups of tools would be distributed separately?\n\nAway we go!\n\n## The Situation\n\nIn this mini assignment we are going to write an application that simulates a supply chain. We will build the application first to transport medicines between their manufacturer and hospitals and then slowly expand it (through generalization) to support simulations of different types of supply chains. The entire application is started and controlled by a `main` function (it's technically a method and we will return to the distinction between methods and functions below) in the `SupplyChain.java` file in `src` directory. Like C and C++ programs, all Java applications start with a so-called `main` function. Like the main functions in C and C++ programs, the `main` function in Java also has to have a very particular signature:\n\n```Java\n\npublic static void main(String args[]) {\n  ...\n}\n```\n\nIf you are familiar with the signature of the `main` function in C and C++, nothing about this declaration will be surprising. The signature is defining a method (technically a `static` method) named `main` that takes an array (of variable length) of `String`s as a parameter. That array is filled with the values that are given on the *command line* when the program is executed. For the Medava application, we do not accept any input from the user when they execute the program so we will not deal with the `args` parameter any further. Even though our application will not take any input from the user on the command line, we *must* keep that parameter. (*Note*: In C/C++, the `main` function also includes parameters where values from the command line are made accessible to be programmer. However, in C/C++, naming that parameter is optional.)\n\nWhat do the other components of the declaration indicate? There's a `static` and a `public`. We will talk about `public` later so let's focus on `static` here. Before doing that, we have to see more context around the `main` function. Notice that the `main` function is actually in a class! Why? Because everything in Java has to be in a class. In that sense, Java can be called a pure OOP language. Unlike C++ where standalone functions are allowed (because it is a hybrid between imperative and object-oriented), everything in Java must be contained in a class.\n\nIf everything is a class, then all the subprograms that we define in Java are actually methods (which is not only the academic term of art in object-oriented programming for procedures that operate on the data in an instance of an abstract data type (Gamma, E., Helm, R., Johnson, R., & Vlissides, J. (1994). Design patterns: Elements of reusable object-oriented software. Addison Wesley.) but it is also the language-specific term that Java uses). Based on the definition of a method, we would expect that in order to execute one we must have instantiated an object of the type in which that method is declared! Normally, yes, that would be the case. However, using `static` keyword modifier on a method makes that method a static method and gives the programmer the power to be able to invoke that method without having to instantiate its containing class. In this case, we do not have to instantiate a `SupplyChain` class to be able to call `main`. The syntax for invoking a non-`static` method requires an instance of the class:\n\n```Java\n\nMyDataType mdt = new MyDataType();\nmdt.someMethod();\n```\nWhereas invoking a static method (`someStaticMethod`) does not require an instance:\n\n```Java\nMyDataType.someStaticMethod();\n```\n\nAs a result, `someStaticMethod` cannot make reference to any of the member variables (what Java calls *fields*) of the `MyDataType` class. Can you understand why? In an OOP each instance of a class has its own, private copy of all the member variables whose values are completely independent of the values of the member variables of any other instance. By invoking a method on a particular instance (`mdt` in the example above), the caller provides the method the context it needs to find those values. When the programmer calls a `static` method, the method gets no such context. It is, therefore, nonsensical for a `static` method to even think about member variables. It might make more sense if you use an alternate name for member variables: [*instance* variables.](https://en.wikipedia.org/wiki/Instance_variable)\n\nBecause the `SupplyChain` class contains a `public`, `static` method named `main` with an appropriate set of parameters and return value, and that is the only class that we will compile that contains such a method, the Java *virtual machine* (JVM) will automatically invoke this method when the program is launched. After launching that method, the JVM will shepherd along program execution in whatever way the program's code defines.\n\nTo witness this process in action (and confirm that your installation and configuration of Java is correct), add\n\n```Java\nSystem.out.println(\"Hello, <your name>! This is the WOPR speaking.\");\n```\n\nto the body of the `main` function in the `SupplyChain` class and then execute the program. Once you have confirmed that the program runs (by checking that the program produces\n\n```\nHello, Will! This is the WOPR speaking.\n```\n\nas output), you can comment out that line of code. *Do not remove it*.\n\n## What Goes Around Comes Around\n\nThe pharmacy creates medicine and needs to ship it to the hospital. In the simulation, we are not concerned about the pharmacology of the medicine (per se) but we are concerned about how its chemical makeup might affect its transportation. For instance, does the medicine's composition require that it be refrigerated during transportation? That it cannot be jostled? That it cannot be in transport for longer than a certain period of time?\n\nLet's start building a `Medicine` class. The `Medicine` class will be the *base class* (what Java calls a *superclass*) for all the medicines that are transportable between point A and point B in our simulation. We will add functionality to the class (and its subclasses [what Java also calls subclasses]) throughout the assignment but there are a few things that we can configure upfront.\n\nWhen the programmer *instantiates* (creates an instance of [unhelpfully]) a class (by using the `new` keyword to write a *[class instance creation expression](https://docs.oracle.com/javase/specs/jls/se18/html/jls-15.html#jls-15.9)*), the class' _constructor_ is called. The job of the constructor is to perform any actions that are required to initialize an instance of that particular type (e.g., initialize instance variables, configure external resource access [database connections, file handles, network connections, etc]). The constructor is like any other method in that it may have parameters. However, the constructor differs from other methods in that its name is prescribed by the language (it must be the same as the name of the class) and it does not actually return anything and, therefore, has no return type. The constructor for our `Medicine` class will take a single parameter -- the name of the medicine (as a `String`).\n\nIn the `Medicine` class in the `Medicine.java` file, write the following constructor:\n\n```Java\n\npublic Medicine(String medicineName) {\n\n}\n```\n\nThat code defines a constructor that takes a `String` parameter whose name is `medicineName`. We want to store that user-supplied medicine name as a field so that our methods can use it. To do that, we will need to create that field. In the `Medicine` class, declare the `mMedicineName` field of type `String` by writing:\n\n```Java\nprivate String mMedicineName;\n```\n\nsomewhere in the class but outside the constructor. In the constructor we have to set its value to the user-supplied value. Add the following line to the constructor:\n\n```Java\nmMedicineName = medicineName;\n```\n\nThe declaration statement declares a field named `mMedicineName` whose type is `String` and specifies that it has `private` access level. Access control in an OOP is a tool for the programmer to specify who is allowed to access an entity. Generally, access is granted/revoked according to different audiences:\n\n1. *clients*: Clients are other programmers who use a class by instantiating it.\n2. *derivers*: Derivers are other programmers who modify/extend a class by inheriting from it (see below).\n3. *self*: Self is the programmer who is implementing the class (i.e., us!).\n\nThe *[access modifiers](https://docs.oracle.com/javase/specs/jls/se18/html/jls-6.html#jls-6.6)* that Java provides correspond to those three audiences:\n\n1. `public`: *anyone* can access it (in particular, the *client* can access it).\n2. `protected`: generally speaking (there are caveats and exceptions, of course), a *protected* entity can only be accessed the programmer implementing the class or a deriver.\n3. `private`: A *private* entity can only be accessed by itself (again, with exceptions).\n\n\nBecause `mMedicineName` is declared to be private, none of our clients (or even subclasses) can get access to it directly. How, then, will they use it? We should give them a means to read that value. We will write a _getter_ -- a method that allows external entities a view of a private entity. In the `Medicine` class, write the following getter:\n\n```Java\npublic String getMedicineName() {\n  return mMedicineName;\n}\n```\n\nThe method `getMedicineName` will return to the caller a copy of the name of the medicine. We specified that clients (and derivers) can invoke it (`public`). Great. That was easy.\n\nThe only other method that we want to implement now is a method that will return `true` or `false` depending on whether the medicine remains safe if subjected to a particular temperature range. Given two temperatures, a low temperature and a high temperature, the method will return `true` if the medicine is safe at a temperature in that range and returns `false` if it would become unsafe at any temperature in that range. Write the following method in the `Medicine` class to accomplish this functionality:\n\n```Java\n    public boolean isTemperatureRangeAcceptable(Double lowTemperature, Double highTemperature) {\n        if (this.minimumTemperature() <= lowTemperature &&\n                highTemperature <= this.maximumTemperature()) {\n            return true;\n        }\n        return false;\n    }\n```\n\n`boolean` is the keyword for a Boolean value in Java and `Double` specifies a variable whose type is a non-primitive double-precision floating-point value (more on the difference between a primitive and non-primitive floating-point value below).\n\nSo, what of `this.minimumTemperature()` and `this.maximumTemperature()`? Will, we never declared an instance named `this` and you said that methods all required instances, so what gives? In Java, `this` is a special keyword [that](https://docs.oracle.com/javase/specs/jls/se18/html/jls-15.html#jls-15.8.3)\n\n> ... denotes a value that is a reference to the object for which the instance method was invoked ..., or to the object being constructed.\n\nThat helps! So, we know that the current method invocation (on the `isTemperatureRangeAcceptable` method) and the code in those two method invocations will have access to fields of the same instance of the `Medicine` class via the `this` instance variable.\n\nIt also gives us a task: we must implement those methods so that the `isTemperatureRangeAcceptable` method can use them. Obviously not every medicine has the same range of safe temperatures. However, it seems clear that there is a baseline reasonable range of temperatures outside of which our medicine will spoil. In the `Medicine` superclass, then, we will provide a so-called *default* implementation of the two methods and we will leave it up to any subclasses to _override_ these methods as a way to customize functionality specific to a type of medicine. In other words, our software will rely on the support for _virtual methods_ in Java to increase programmer efficiency! Type in the following method declarations to `Medicine.java`:\n\n```Java\n\n    public double minimumTemperature() {\n        return 0.0;\n    }\n\n    public double maximumTemperature() {\n        return 100.0;\n    }\n```\n\nThat's a good start for the implementation of our `Medicine` class. Let's move on to an implementation of the class that will actually simulate the thing that does the transportation!\n\nYou may be asking yourselves at this point, \"Will, why are we going through the hassle of defining methods for the maximum and minimum temperature? Why can't we just make those fields (or what are called instance variables in some other languages)?\" Well, we *could* do that, but we would lose a ton of power! If a subclass of our `Medicine` declared (later) a different minimum and maximum temperature field (in order to override the defaults provided by the super class), any method implemented in the superclass that attempts to access that field (instance variable) *will access the value of the field in the super class* and *not* the value in the actual class. In other words, field access does not follow open recursion! See the `java_late_binding` demo in the example code repository for this class for a more complete explanation!\n\n## Eastbound and Down\n\nAll good things have names (and, apparently, come to those who wait). Let's set up the transporter that we are going to use to move goods so that it can have a name. Add the following code to the `Transporter` class in `Transporter.java`:\n\n```Java\n\n    private String mTransporterName;\n    public String getTransporterName() {\n        return mTransporterName;\n    }\n```\n\nWhether it is a semitruck, train or plane, a thing that transports goods contains a bunch of those goods. So, we know that our class that represents a transporter will at least have some way to store the goods that it is responsible for moving. Add the following field declaration to the `Transporter` class in `Transporter.java`:\n\n```Java\n\nprivate List<Medicine> goods;\n```\n\nWe have seen most of those syntactic elements before, but there is one new thing. `List` is a generic type in Java. Generic types are the Java-specific way of building _parametric ADTs_. This declaration instructs Java that `goods` will be a `List` of `Medicine`s. `goods` will only support storage of instances of the `Medicine` class, and, crucially, any of its subclasses!\n\nThe declaration here creates a variable of _reference type_. A reference type in Java is *the* way to refer to an instance of a user-defined ADT (in other words, a class). Java's standard library is kind enough to define the `List` type for us, but our work is not done.\n\nFirst, we have to tell Java where to find the implementation of the `List` class. Java has the `import` statement that works like the `#include` preprocessor directive in C++. Add this import statement to the beginning of the `Transporter.java` file:\n\n```Java\nimport java.util.List;\n```\n\nSecond, the initial value of a reference type variable (i.e., any variable that has a type other than a primitive) is `null`. So, we have a problem -- we cannot leave the value of `goods` as `null` for very long or else we run the risk of attempting to use a variable whose value is `null`. What are we to do?\n\nJava offers an awesome opportunity to initialize fields when an instance is created. No, its not the constructor (although we could always do it there). Rather, if there is an unnamed block of code (ie, code between a `{` and `}`) contained in the class declaration, the code in that block executes every time that an instance of the class is created. Java calls these blocks *[instance initializers](https://docs.oracle.com/javase/specs/jls/se18/html/jls-8.html#jls-8.6)*. No matter which constructor is invoked (constructors can be overloaded in Java which means that there can be multiple constructors per class!), the code in instance initializers is guaranteed to be executed *after* the constructor! Woah!\n\nAdd the following instance initializer to the `Transporter` class:\n\n```Java\n{\n  goods = new List<Medicine>();\n}\n```\n\nUhoh! What do we see? Java is telling us that we cannot instantiate a variable whose type is `List`. Why not? That's because `List` in Java is an _[abstract class](https://docs.oracle.com/javase/specs/jls/se18/html/jls-8.html#jls-8.1.1.1)_. An abstract class is a class in Java that specifies a set of supported methods but does not offer even a baseline implementation for (at least one of) those methods. You can only instantiate _subclasses_ of abstract classes that implement the abstract class' methods. Java offers several different subclasses of `List` that we can choose from. To reiterate, no matter what subclass we choose, it will support the same operations as the `List` and will meet Java's technical requirements to be a _subtype_ of a `List`. We will, rather arbitrarily, choose the `ArrayList`. Replace the code in the instance initializer with\n\n```Java\n{\n  goods = new ArrayList<Medicine>();\n}\n```\nLike the `List` itself, we have to tell Java where to find the implementation of `ArrayList`:\n\n```Java\nimport java.util.ArrayList;\n```\n\nNow we are getting somewhere.\n\nAs for behaviors, it makes sense to give a user of the transporter the ability to load it and unload it and the ability to ship it! Loading and unloading the transporter involves simply updating the contents of the `goods` field. So, we'll just modify the access specifier for that field and set it to `public`. That way our clients can add and remove (load and unload) goods as they see fit.\n\n```Java\n\npublic List<Medicine> goods;\n```\n\nNext, let's add a function that simulates the shipping of the goods via the transporter. We'll call it `ship` and it won't return a value:\n\n```Java\npublic void ship() {\n  // Do some shipping!\n}\n```\n\nWe can add functionality later, but for now leaving the `ship` method without a meaningful body is okay.\n\nWe have things to ship (`Medicine`s) and we have a way to ship them (`Transporter`). Let's make a few entities that will actually use the services provided by those classes.\n\n## What Goes Around Comes Around\n\nThe source of our shipments is going to be the pharmacy where the drugs are prepared. The destination of our shipments will be the hospital where the drugs heal the sick. The two classes that we will use to simulate this sending and receiving process will need to be able to load and unload, respectively, a transporter. Each of the two classes will also have a name so that we can more easily identify each when the simulation is running. Add the following code to `Hospital.java`:\n\n```Java\npublic class Hospital {\n\n    public Hospital(String hospitalName) {\n        name = hospitalName;\n    }\n\n    void receive(Transporter t) {\n        while (!t.goods.isEmpty()) {\n            Medicine unloaded = t.goods.remove(0);\n            System.out.println(String.format(\"Receiving an %s.\", unloaded.getMedicineName()));\n        }\n    }\n\n    public String name() {\n        return name;\n    }\n\n    private String name;\n}\n```\n\nAnd on the other side of the pipeline ... add the following code for the `Pharmacy` class in the `Pharmacy.java` file:\n\n\n```Java\npublic class Pharmacy {\n    public Pharmacy(String pharmacyName) {\n        mPharmacyName = pharmacyName;\n    }\n    public boolean send(Transporter t) {\n        Medicine advil = new Medicine(\"Advil\");\n        System.out.println(String.format(\"Sending an %s.\", advil.getMedicineName()));\n        return t.goods.add(advil);\n    }\n\n    public String pharmacyName() {\n        return mPharmacyName;\n    }\n\n    private String mPharmacyName;\n}\n```\n\nNow that we have all the components of our simulation, let's build something that will set the plot in motion!\n\n## As The World Turns\n\nThe `HospitalRunner` class will _run_ the simulation. In a simple simulation, we will play out what happens when a particular pharmacy sends some medicine to a receiving hospital via a transporter. Our `HospitalRunner` class will expose a single method named `run` that will script a simulation scenario like that. Add the following code for the `HospitalRunner` class to the `HospitalRunner.java` file:\n\n```Java\npublic class HospitalRunner {\n    public static void run() {\n        Transporter semiTruck = new Transporter();\n\n        Pharmacy cvs = new Pharmacy(\"CVS at 7500 Beechmont Avenue\");\n\n        cvs.send(semiTruck);\n\n        Hospital uc = new Hospital(\"World Famous University of Cincinnati Children's Hospital\");\n\n        uc.receive(semiTruck);\n    }\n}\n```\n\n(Yes, that *is* the address where I get *my* medicines.) I think that the script for the simulation is fairly reasonable:\n\n1. Create a semitruck that will do the `Transporter`ing.\n2. Create a pharmacy that will do the sending.\n3. Direct the pharmacy to send its medicine.\n4. Act as a freight broker that actually does the shipping.\n5. Create a hospital that will do the receiving.\n6. Direct the hospital to receive the shipment.\n\nThere's still one part of the simulation to wire up. Remember how we described the way that the JVM starts an application? Well, that `main` function is actually in the `SupplyChain` class and not in the `HospitalRunner` class. So, we will need to modify the `main` function in the `SupplyChain` class to actually do the `HospitalRunner` simulation. Add the following single line to the `main` function in the `SupplyChain` class:\n\n```Java\nHospitalRunner.run();\n```\n\nWait, don't we have to instantiate a `HospitalRunner` first before we can use its `run` method? Ah, no! Look closely at the code that we used in the `HospitalRunner` and you will see how the method is `static`! Did you catch that? Tricky, tricky.\n\n## Checkpoint 1\n\nCheck the output of your code at this point. Does it run? What do you see printed when it executes?\n\nIf your output does not look like\n\n```\nSending an Advil.\nReceiving a Advil.\n```\n\ndouble back and check to see if you can find the mistake.\n\n## What Can Brown Do For You?\n\nThese days, operations that claim to offer the fastest, most reliable transportation are all around. They are the subcontractors to whom Amazon, FedEx and others farm out the painstaking process of actually moving goods from one place to another (and paying their employees fair wages). A pharmacy ideally only wants to ship their goods using someone they can trust \"When it absolutely, positively has to be there overnight\". One of the conditions a pharmacy uses to determine the trustworthiness of a shipper is the transporter's ability to maintain a consistent temperature. The pharmacy will only ship a medicine with a transporter whose temperature-control parameters are compatible with the safe temperatures of the medicine they are sending.\n\nTo equip our simulation to support such a condition, we will have to add some features to the `Transporter` class. Let's add two fields, a low temperature and a high temperature, to keep track of the low and high temperature, respectively, that the transporter guarantees. Add the following code to the `Transporter` class:\n\n```Java\n    private double mLowTemperature, mHighTemperature;\n```\n\nWhere before there was no constructor for the `Transporter` class, we will need one so that the client of the `Transporter` class is able to specify these parameters when a new instance is created. Add the following constructor to the `Transporter` class:\n\n\n```Java\n    public Transporter(String transporterName, double lowTemp, double highTemp) {\n        mTransporterName = transporterName;\n        mLowTemperature = lowTemp;\n        mHighTemperature = highTemp;\n    }\n```\n\nNot quite done yet.\n\n## We've Been Exposed\n\nWell, well, well. We're in quite a pickle now. Why? In the design of our `Transporter` class we exposed the `goods` field to the client. If any client of the `Transporter` can add goods to the, er, `goods` field (willy nilly) then there is no way for the `Transporter` to enforce a guarantee that it only accept packages that it can be sure to keep safe!\n\nWe've unwittingly found ourselves snakebit by failing to observe one of the prime directives of OOP: data hiding (a.k.a. encapsulation). To fix the flaw, we will have to go back and do some surgery (the puns keep on coming). Better to bite the bullet (another one!) now and make the fix than continue to pay the price as the software evolves.\n\nFirst, let's correct the error and make the `goods` field private:\n\n```Java\nprivate List<Medicine> goods;\n```\n\nNow we will have to offer a mechanism for the client to be able to add a medicine to the `Transporter`. Obviously the method will accept an instance of the  `Medicine` class to ship. But what does the method return? Let's have it return `true` in the case where the instance of the `Medicine` that the client wants to ship is compatible with the `Transporter` and can be carried and `false` otherwise. Add the following implementation of the `load` method to the `Transporter` class:\n\n```Java\n    public boolean load(Medicine itemToLoad) {\n        if (itemToLoad.isTemperatureRangeAcceptable(mLowTemperature, mHighTemperature)) {\n            System.out.println(String.format(\"Adding a %s to the transporter.\", itemToLoad.getMedicineName()));\n            goods.add(itemToLoad);\n            return true;\n        }\n        return false;\n    }\n```\n\nFor the other side, the receiver side, we will need to provide methods to tell whether the `Transporter` has cargo and methods to retrieve that cargo. Add the following implementation of the `isEmpty` and `unload` methods to the `Transporter` class:\n\n```Java\n    public Medicine unload() {\n        return goods.remove(0);\n    }\n    public boolean isEmpty() {\n        return goods.isEmpty();\n    }\n```\n\nFinally, we finish paying back our technical debt by updating the `Pharmacy` and `Hospital` classes to use the new functionality of the `Transporter`. Update the `Pharmacy`'s `send` function with this code:\n\n```Java\n    public boolean send(Transporter t) {\n        Medicine advil = new Medicine(\"Advil\");\n        if (t.load(advil)) {\n            System.out.println(String.format(\"Sending %s on the %s transporter.\", advil.getMedicineName(), t.getTransporterName()));\n            return true;\n        }\n        System.out.println(\n                String.format(\"Cannot load %s on to the %s transporter.\", advil.getMedicineName(), t.getTransporterName()));\n        return false;\n    }\n```\n\nand the `Hospital`'s `receive` method with this code:\n\n```Java\n    void receive(Transporter t) {\n        while (!t.isEmpty()) {\n            Medicine unloaded = t.unload();\n            System.out.println(String.format(\"Receiving %s off the %s transporter.\", unloaded.getMedicineName(), t.getTransporterName()));\n        }\n    }\n```\n\nFinally, our simulation will need to be upgraded to take advantage of the added fidelity. Change the instantiation of the `Transporter` class to\n\n\n```Java\n        Transporter semiTruck = new Transporter(\"LaserShip\", 30.0, 80.0);\n```\n\nin the simulation scenario script.\n\n## Checkpoint 2\n\nDo the results of a run of the simulation change at all as a result of the added conditions imposed? If the output from executing your program does not match the following, please go back and check for mistakes!\n\n```\nAdding a Advil to the transporter.\nSending Advil on the LaserShip transporter.\nReceiving Advil off the LaserShip transporter.\n```\n\n## Box Office Blockbuster\n\nAny fly-by-night shipper can move Ibuprofen from one place to another. It's an entirely different matter to provide delivery services between pharmacy and hospital of an advanced drug like Activase.\n\nTo simulate shipping different medicines, we have a few software-design options from which to choose: We could simply change the implementation of the `Medicine` class' `minimumTemperature` and `maximumTemperature` to return different constants. That doesn't seem like a good solution -- it does not really allow us the chance to have many different types of medicines, each of which with a particular safe-temperature range. Are there other options?\n\nOf course there are! Inheritance to the rescue -- in particular, _implementation inheritance_. Let's create a subtype of the `Medicine` class that customizes the functionality of those two temperature-related virtual functions in a way that more closely models the requirements for shipping a thrombolytic drug. We will name the class `Thrombolytic`. In `Java`, all `public` classes have to exist in a file with the same name as the class (with a `.java` suffix). Add the following class declaration to the `Thrombolytic.java` file:\n\n```Java\npublic class Thrombolytic extends Medicine {\n\n}\n```\n\nImmediately you notice that the Java compiler is *not* happy. Why does it yell at me? The class declaration that we created tells Java that the `Thrombolytic` class (we should have picked an easier name to type) is a subtype of the `Medicine` class (using the `extends` keyword) and Java knows that the `Medicine` class has a single constructor that takes a `String` parameter (remember that we construct a `Medicine` by giving it a name?). Java is telling us that, in order to construct something that is a subtype of the `Medicine` class, the `Thrombolytic` class must invoke its supertype's constructor. Fine, we'll oblige. Add the following constructor code to the `Thrombolytic` class:\n\n```Java\n\npublic Thrombolytic() {\n  super(\"Thrombolytic\");\n}\n```\n\nHere we define a constructor for the `Thrombolytic` class that takes no parameters and uses the `super` keyword to invoke functionality in the supertype -- in particular, we are invoking one of the supertype's constructors. That constructor, remember, takes a `medicineName` as a parameter and we use the pre-determined \"Thrombolytic\" as the value. Problem solved!\n\nWith that out of the way, we can get down to accomplishing our actual goal: customizing the safe temperatures of this medicine. A thrombolytic medicine generally [needs to be stored between 39.2 degrees and 41 degrees (Fahrenheit) to remain safe](https://www.ncbi.nlm.nih.gov/pmc/articles/PMC3621317/). Given that, in our implementation of the `Thrombolytic` class we will _override_ the `Medicine` class' implementation of the `minimumTemperature` and `maximumTemperature` function to provide a different behavior when those methods are invoked on an instance of a `Thrombolytic` class as opposed to an instance of a `Medicine` class. Here is the first opportunity to see the power of _virtual methods_: A virtual method is one that is implemented by a class at several points throughout an inheritance hierarchy. In an OOP language, at runtime, the version of the virtual method specific to an object's *actual* type is chosen for execution (this feature is called _open recursion_ or _late binding_). What do we mean by \"actual\"? In an OOP language (like Java), it is possible to assign an instance of class `C` to a variable, call it `v`, whose type restricts it to hold instances of class `B`, where `B` is a superclass of `C`. Despite the fact that the type of `v` would indicate that it holds an instance of a `B`, it *actually* holds an instance of `C`. The user of `v` is none-the-wiser because of _behavioral subtyping_ (aka, the Liskov Substitution Principle). However, we want the instance of the virtual method associated with the class `C` to be invoked in this case even though the type of the variable indicates that is an instance of `B`. That's a mouthful. Let's see it work in practice.\n\nAdd the following method implementations to the `Thrombolytic` class:\n\n```Java\n  @Override\n  public double minimumTemperature() {\n    System.out.println(\"Getting the minimum safe temperature for a Thrombolytic drug.\");\n    return 39.2;\n  }\n\n  @Override\n  public double maximumTemperature() {\n    System.out.println(\"Getting the maximum safe temperature for a Thrombolytic drug.\");\n    return 41.0;\n  }\n```\n\nNothing there is new, except for the `@Override` syntax. What gives? This is a so-called _[annotation](https://docs.oracle.com/javase/specs/jls/se18/html/jls-9.html#jls-9.7)_. In Java, annotations are non-functional code that provides an indication to the compiler about the programmer's intent and helps the compiler catch common errors. The [`@Override` annotation](https://docs.oracle.com/javase/tutorial/java/annotations/predefined.html) indicates to the compiler that the programmer intends to override a virtual method from the superclass. The compiler then can check to make sure that the method does properly override a method from the baseclass and will generate an error/warning if it does not.\n\nWhy is this helpful?\n\nLet's say that I was typing too fast and wrote the following instead of what I wrote above:\n\n```Java\n  public double maximumTemperatur() {\n    System.out.println(\"Getting the maximum safe temperature for a Thrombolytic drug.\");\n    return 41.0;\n  }\n```\n\nNotice the typo? Yeah, neither did I! It's hard to. The code above would compile but your code would not be providing an alternate, subclass-specific implementation of the `maximumTemperature` function. Had the programmer used the `@Override` annotation, the compiler would have flagged the error. Pretty useful stuff!\n\nNow, let's update our simulation to attempt to ship one of these high-caliber medicines. First, update the code in the `Pharmacy` class to ship thrombolytic medicines. Update the `send` method of the `Pharmacy` class to look like:\n\n```Java\n    public boolean send(Transporter t) {\n        Medicine advil = new Medicine(\"Advil\");\n        if (t.load(advil)) {\n            System.out.println(String.format(\"Sending %s on the %s transporter.\", advil.getMedicineName(),\n                    t.getTransporterName()));\n        } else {\n            System.out.println(String.format(\"Cannot load %s on to the %s transporter.\", advil.getMedicineName(),\n                    t.getTransporterName()));\n            return false;\n        }\n\n        Medicine activase = new Thrombolytic();\n        if (t.load(activase)) {\n            System.out.println(String.format(\"Sending %s on the %s transporter.\", activase.getMedicineName(),\n                    t.getTransporterName()));\n        } else {\n            System.out.println(String.format(\"Cannot load %s on to the %s transporter.\", activase.getMedicineName(),\n                    t.getTransporterName()));\n            return false;\n        }\n        return true;\n    }\n```\n\nNotice, in particular, how we are assigning to a variable, `activase`, whose type is `Medicine`, an object whose type is `Thrombolytic`. Does that remind you of the situation we discussed above (using `C` anywhere that we expected a `B` and not knowing the difference between `C` as a _subtype_ of `B` and `B` itself?).\n\n## Checkpoint 3\n\nRun the simulation. What do you notice? If your output does not match what is given below, go back and look for any typos:\n\n```\nAdding a Advil to the transporter.\nSending Advil on the LaserShip transporter.\nGetting the minimum safe temperature for a Thrombolytic drug.\nCannot load Thrombolytic on to the LaserShip transporter.\nReceiving Advil off the LaserShip transporter.\n```\n\nWhen you run the simulation you will notice that, indeed, Java is doing the right thing and selecting the overriden `minimumTemperature` and `maximumTemperature`! Exactly what we want -- the `activase` cannot be loaded on to the LaserShip transporter because it does not meet the requirements for keeping the medicine safe.\n\n## A Better Mousetrap\n\nLet's update `HospitalRunner` to simulate what happens when a better transportation provider is used that supports a more conducive environment for chemimcally volatile medicines. Change the `run` method of the `HospitalRunner` class to look like:\n\n```Java\n    public static void run() {\n        Transporter priorityDispatch = new Transporter(\"Priority Dispatch\", 40.0, 41.0);\n\n        Pharmacy cvs = new Pharmacy(\"CVS at 7500 Beechmont Avenue\");\n\n        cvs.send(priorityDispatch);\n\n        Hospital uc = new Hospital(\"World Famous University of Cincinnati Children's Hospital\");\n\n        uc.receive(priorityDispatch);\n    }\n```\n\nand rerun the simulation! Your output should look like this:\n\n```\nAdding a Advil to the transporter.\nSending Advil on the Priority Dispatch transporter.\nGetting the minimum safe temperature for a Thrombolytic drug.\nGetting the maximum safe temperature for a Thrombolytic drug.\nAdding a Thrombolytic to the transporter.\nSending Thrombolytic on the Priority Dispatch transporter.\nReceiving Advil off the Priority Dispatch transporter.\nReceiving Thrombolytic off the Priority Dispatch transporter.\n```\n\nNow that we are using a more specialized transportation provider we can safely ship the cutting-edge medicine. Pretty cool!\n\n## I'm Not Buying What You Are Selling\n\nTo this point our restrictions have focused on whether the shipper feels comfortable sending something and *not* on whether the receiver feels safe [accepting a package](https://en.wikipedia.org/wiki/The_Package_(Seinfeld)). This state of affairs must change. Hospitals are sometimes not equipped to properly handle potentially addictive medications. So-called controlled substances are given a schedule number by the [Drug Enforcement Administration](https://www.dea.gov/drug-information/drug-scheduling) (from 1 to 5), with 1 being the most addictive (and least medically necessary) and 5 being the least addictive. We will add a \"sixth\" category that indicates that a medicine is not a controlled substance and, therefore, does not have a schedule. To hold this information about a medicine we will add a field to the `Medicine` class.\n\nJust what type should that field be given? We *could* use an integer -- after all, 1, 2, 3, 4, 5 and 6 are all numbers. However, so, are 49, 32 and 67, but those aren't valid schedules. If we used an integer we would also be forced to use, gasp, magic values! In other words, we would have the constants `1`, `2`, `3`, etc littered throughout our code!\n\nThink about all the different possible values for a variable that holds a schedule. We *listed* them above. You could even say that we *enumerated* them. Oh, yes! Let's use an enumerated value! Java provides great support for enumerated types -- types that only hold certain, pre-determined valid values -- that allow us to give the value nice, descriptive names at the same time! What is even cooler is that in Java an enumerated type is just a special type of a class. As a result, you can do things with enumerated types in Java that you cannot do in other languages (like write a constructor!). Boom.\n\nAgain, all public classes (and, therefore, enumerated types) must be put in a separate, appropriately named file. Define the `MedicineSchedule` enumeration this way in the `MedicineSchedule.java` class:\n\n```Java\npublic enum MedicineSchedule {\n    One(1),\n    Two(2),\n    Three(3),\n    Four(4),\n    Five(5),\n    Uncontrolled(6);\n\n    private int mSchedule;\n    private MedicineSchedule(int schedule) {\n        mSchedule = schedule;\n    }\n\n    public String asString() {\n        switch (mSchedule) {\n            case 1:\n                return \"Schedule One Medicine\";\n            case 2:\n                return \"Schedule Two Medicine\";\n            case 3:\n                return \"Schedule Three Medicine\";\n            case 4:\n                return \"Schedule Four Medicine\";\n            case 5:\n                return \"Schedule Five Medicine\";\n            default:\n                return \"Uncontrolled\";\n        }\n    }\n}\n\n```\n\nThis enumerated type declaration shows the full power of enumerations in Java. The named enumerated values (`One`, `Two`, `Three`, etc) are, essentially, nicely named constructors. Using these values is the *only* valid way to create a value that is compatible with a variable whose type is the enumerated type `MedicineSchedule`. In other words,\n\n```Java\nMedicineSchedule schedule = MedicineSchedule.One;\n```\n\nis the only way to create a new variable with the `MedicineSchedule` type. To attempt to do\n\n```Java\nMedicineSchedule schedule = new MedicineSchedule(1);\n```\n\n, or anything else like that, is an error.\n\nGreat. Let's add a method to the `Medicine` class that will allow clients to ask about a `Medicine`'s schedule. In the superclass, `Medicine`, we will want that method to return some baseline or reasonable default schedule for all medicines in the absence of a more specific schedule provided by a subclass. The problem is that a default really doesn't exist! It seems dangerous to assume that if a subclass of the `Medicine` class simply omits an overriding implementation of this method that that the drug is uncontrolled. What are we to do?\n\nLet's make this rule: If you want to be a `Medicine`, then you *must* implement your own version of a getter method that returns its schedule. `Medicine` will not provide you with a default! Java gives us the power to say such a thing! How cool? Add the following _abstract method_ declaration to the `Medicine` class:\n\n```Java\n    public abstract MedicineSchedule getSchedule();\n```\n\nThis causes a problem, doesn't it? If there is no implementation of a method that a declaration promises to exist, it is impossible to actually create an instance of that class. I mean, what would happen if you had created an instance of `Medicine` and you called `getSchedule` on that instance? There's no implementation! The presence of a single abstract method in a class in Java is enough to make the entire class abstract. An abstract class itself cannot be instantiated. Only subclasses of an abstract class can be instantiated (remember the difference between `List` and `ArrayList`?). Change the declaration of the `Medicine` class so that it includes the `abstract` keyword:\n\n```Java\npublic abstract class Medicine {\n...\n}\n```\n\nThere are trickle-down effects of this change in the `Pharmacy` class. We can no longer instantiate a generic `Medicine` object and have it represent Advil. We'll fix that by creating an `Ibuprofen` class in the `Ibuprofen.java` file (in the same directory as the `Medicine.java` file) by adding the following code:\n\n```Java\npublic class Ibuprofen extends Medicine {\n\n    public Ibuprofen() {\n        super(\"Ibuprofen\");\n    }\n\n    @Override\n    public MedicineSchedule getSchedule() {\n        return MedicineSchedule.Uncontrolled;\n    }\n\n    @Override\n    public double minimumTemperature() {\n        return 30.0;\n    }\n\n    @Override\n    public double maximumTemperature() {\n        return 90.0;\n    }\n}\n```\n\nNow, back in the `Pharmacy` class we'll remove the instantiation of the `Medicine` class that represents Advil and use an `Ibuprofen` class instead:\n\n```Java\n        Medicine advil = new Ibuprofen();\n```\n\nOne final bit of clean up -- we have to specify the schedule of the `Thrombolytic`. Add the following method declaration to the `Thrombolytic` class:\n\n```Java\n  @Override\n  public MedicineSchedule getSchedule() {\n    return MedicineSchedule.Uncontrolled;\n  }\n```\n\nThat's great, but so far we don't have any controlled substances available for shipping! So, let's create one. We'll call it `Oxycodone` (you should know by now where and how to create/name the file for such a class):\n\n```Java\npublic class Oxycodone extends Medicine {\n\n  public Oxycodone() {\n    super(\"Oxycodone\");\n  }\n\n  @Override\n  public MedicineSchedule getSchedule() {\n    return MedicineSchedule.Two;\n  }\n}\n```\n\nBased on the declaration of the `Oxycodone` class, what are going to be its minimum and maximum safe temperatures? Is the `@Override` annotation useful here? Let's respecify what the pharmacy in our simulation produces:\n\n```Java\n   public boolean send(Transporter t) {\n        Medicine advil = new Ibuprofen();\n        if (t.load(advil)) {\n            System.out.println(String.format(\"Sending %s on the %s transporter.\", advil.getMedicineName(),\n                    t.getTransporterName()));\n        } else {\n            System.out.println(String.format(\"Cannot load %s on to the %s transporter.\", advil.getMedicineName(),\n                    t.getTransporterName()));\n            return false;\n        }\n\n        Medicine activase = new Thrombolytic();\n        if (t.load(activase)) {\n            System.out.println(String.format(\"Sending %s on the %s transporter.\", activase.getMedicineName(),\n                    t.getTransporterName()));\n        } else {\n            System.out.println(String.format(\"Cannot load %s on to the %s transporter.\", activase.getMedicineName(),\n                    t.getTransporterName()));\n            return false;\n        }\n\n        Medicine oxycontin = new Oxycodone();\n        if (t.load(oxycontin)) {\n            System.out.println(String.format(\"Sending %s on the %s transporter.\", oxycontin.getMedicineName(),\n                    t.getTransporterName()));\n        } else {\n            System.out.println(String.format(\"Cannot load %s on to the %s transporter.\", oxycontin.getMedicineName(),\n                    t.getTransporterName()));\n            return false;\n        }\n\n        return true;\n    }\n```\n\nGreat! We are all done adding the plumbing in our simulation to support categorizing medicines based upon their schedule. Now, let's add some functionality to the receiver (the `Hospital`) to reject medicines that are controlled substances! Update the `receive` method in the `Hospital` class like this:\n\n```Java\n    void receive(Transporter t) {\n        while (!t.isEmpty()) {\n            Medicine unloaded = t.unload();\n            System.out.println(String.format(\"Checking whether Hospital can receive %s.\", unloaded.getMedicineName()));\n            if (unloaded.getSchedule() != MedicineSchedule.Uncontrolled) {\n                System.out.println(String.format(\"Hospital cannot receive controlled substances and %s is a %s.\",\n                        unloaded.getMedicineName(), unloaded.getSchedule().asString()));\n            } else {\n                System.out.println(String.format(\"Accepted a shipment of %s.\", unloaded.getMedicineName()));\n            }\n        }\n    }\n```\n\nNotice how we are able to use the named values of the `MedicineSchedule` enumerated class when comparing the return value of the `getSchedule` method? That makes our code look really, really nice. And then, what's even better, is that we can invoke the `asString` method on a value whose type is `MedicineSchedule` and it will generate a nicely formatted string for us to print!\n\n## Checkpoint 4\n\nIf your output does not match the output below, go back and check for any typos:\n\n```\nAdding a Ibuprofen to the transporter.\nSending Ibuprofen on the Priority Dispatch transporter.\nGetting the minimum safe temperature for a Thrombolytic drug.\nGetting the maximum safe temperature for a Thrombolytic drug.\nAdding a Thrombolytic to the transporter.\nSending Thrombolytic on the Priority Dispatch transporter.\nAdding a Oxycodone to the transporter.\nSending Oxycodone on the Priority Dispatch transporter.\nChecking whether Hospital can receive Ibuprofen.\nAccepted a shipment of Ibuprofen.\nChecking whether Hospital can receive Thrombolytic.\nAccepted a shipment of Thrombolytic.\nChecking whether Hospital can receive Oxycodone.\nHospital cannot receive controlled substances and Oxycodone is a Schedule Two Medicine.\n```\n\n## Part 2: Where Do We Stand?\n\nLet's take stock of where we are now. We have several classes from which we can instantiate objects. Those objects can send messages to one another to solve a problem -- the definition of an object-oriented design/solution. Some of the classes form a hierarchy and others do not. We have classes with static methods, we have classes that are abstract. We have enumerated types. We have virtual methods that override default implementations. We've used lots of Java's power.\n\nBut, like good computer scientists, we always want more! Why can't our `Transporter` class support transporting something other than `Medicine`s? After all, a semi truck or a Sprinter van can hold pretty much anything in their cargo space. Why is our simulation limited to creating transporters that can only move medicines? A great question!\n\nWhat field in the `Transporter` class is responsible for simulating the cargo space? The `goods` field! We declared it as a `List` and then assigned it an instance of a subclass (which we assessed to also be, techically, a subtype according to the Java specification) of the `abstract` `List` class, the `ArrayList`. Remember that `List` and it's subclass `ArrayList` are generic classes. They require a type parameter when they are being declared and instantiated. The type parameter defines the type of the entity that the `List` (in our case, an `ArrayList`) can hold. At this point, our `Transporter`'s `goods` is declared to hold instances of the `Medicine` class (or one of its subclasses).\n\nTo make our `Transporter` more flexible, we are going to need to define a class from which anything that we can put in a `Transporter` will descend! If we want the `Transporter` to support transporting both `Medicine`s and, say, `Paint`s, perhaps we could conjure up the notion that both `Medicine` and `Paint` are forms of chemical compounds. We could define a class `ChemicalCompound` and say that `Medicine` and `Paint` derive from `ChemicalCompound` so that the `Transporter` could carry both when its cargo (`goods`) is declared to hold only instances of that type (or subclasses, of course).\n\nYou can see, though, how quickly we will reach the limits of credulity. For instance, if want to define a `Transporter` that supports safely transporting shelter pets and fine art, we are going to have a hard time coming up with a class from which they can both descend -- without it seeming totally absurd!\n\nThe good news is that Java helps us out. Every class defined in Java implicitly inherits from the `Object` class! The `Object` class is at the root of the inheritance hierarchy and all classes descend therefrom.\n\n## Upgrading `Transporter`\n\nLet's take advantage of this fact and update the `Transporter` to support transporting *any* type of entity. First, let's change the declaration of the `goods` field:\n\n```Java\n    private List<Object> goods;\n```\n\nAnd now we have to change code in our instance initializer:\n```Java\n        goods = new ArrayList<Object>();\n```\n\nBut the changes don't end there!\n\nWe exposed a `load` method that adds an item to the `Transporter`'s cargo bay. Because we want the transporter to be as flexible as possible, we have to redeclare that method to accept any entity that is an instance of the `Object` class. In other words, we can no longer make any assumptions about the types of variables that we can add to our cargo bay:\n\n```Java\n    public boolean load(Object itemToLoad) {\n        if (itemToLoad.isTemperatureRangeAcceptable(mLowTemperature, mHighTemperature)) {\n            System.out.println(String.format(\"Adding a %s to the transporter.\", itemToLoad.getMedicineName()));\n            goods.add(itemToLoad);\n            return true;\n        }\n        return false;\n    }\n```\n\nWe also exposed an `unload` method that unloads (and `return`s) an item from the `Transporter`'s cargo bay. We wrote the return type for the method as `Medicine` because we knew that the `Transporter`'s cargo bay (the `goods`) only held instances of the `Medicine` class (or its subclasses). Now, though, we can't be so confident. The entities in the `goods` can be anything -- we only know that they are instances of the `Object` class. So, we have to change the method declaration:\n\n```Java\n    public Object unload() {\n        return goods.remove(0);\n    }\n```\n\nWhat does that do to the existing clients of the `Transporter`? In particular, what changes need to be made to the `Pharmacy` and the `Hospital`? There are no changes that need to be made to the `Pharmacy`. Any instance of the `Medicine` class, what we had written the `Pharmacy` class to add to the `Transporter`, is *also* an instance of `Object` so we can add those to the `Transporter` without any problem.\n\nWhat happens on the other side? On the `Hospital` side? Well, in the `receive` method of the `Hospital` class, the schedule of every medicine that is unloaded from the `Transporter` is checked. And now we see our first problem with the change from a `Transporter` that holds instance of the `Medicine` class (or subclasses) to a `Transporter` that holds instances of the `Object` class (or subclasses): The type of the variable that we assign the result of the `unload` method must be `Object` and cannot be `Medicine`:\n\n```Java\n    void receive(Transporter t) {\n        while (!t.isEmpty()) {\n            Object unloaded = t.unload();\n            System.out.println(String.format(\"Checking whether Hospital can receive %s.\", unloaded.getMedicineName()));\n            if (unloaded.getSchedule() != MedicineSchedule.Uncontrolled) {\n                System.out.println(String.format(\"I cannot receive controlled substances and %s is a %s.\",\n                        unloaded.getMedicineName(), unloaded.getSchedule().asString()));\n            } else {\n                System.out.println(String.format(\"Accepted a shipment of %s.\", unloaded.getMedicineName()));\n            }\n        }\n    }\n```\n\nAnd now you immediately see Java's unhappiness: the compiler cannot guarantee that an instance of the `Object` class has the `getSchedule` nor the `getMedicineName` method! What are we to do? There's two options: an easy (but potentially incorrect) solution and a hard (but defensive, and always correct) solution. Let's start with the easy solution first.\n\n## When You Assume\n\nThe easy solution is to assume that the objects that are unloaded from the `Transporter` that the hospital is given are actually instances of the `Medicine` class (or subtypes). We can tell Java that we, the programmer, know better than it does by using a _cast_. Though the compiler can only guarantee that instance that comes back from the `Transporter` has the methods that are defined for instances of the `Object` class, as the implementer of the `Hospital` class, we can assume that no one in their right mind would ship us something other than `Medicine`s.\n\n```Java\n    void receive(Transporter t) {\n        while (!t.isEmpty()) {\n            Medicine unloaded = (Medicine)t.unload();\n            System.out.println(String.format(\"Checking whether Hospital can receive %s.\", unloaded.getMedicineName()));\n            if (unloaded.getSchedule() != MedicineSchedule.Uncontrolled) {\n                System.out.println(String.format(\"Hospital cannot receive controlled substances and %s is a %s.\",\n                        unloaded.getMedicineName(), unloaded.getSchedule().asString()));\n            } else {\n                System.out.println(String.format(\"Accepted a shipment of %s.\", unloaded.getMedicineName()));\n            }\n        }\n    }\n```\n\nAlthough we cannot execute this code (there are still compiler errors to fix -- see below), the code that we have written to this point will perform the same as the code we wrote that was `Medicine`-specific. Great!\n\nBut, leaving this code in our product is like walking a very thin rope at great heights in gale-force winds -- we are definitely living dangerously. It's like living almost as dangerously as, dramatic pause, bowling without bumpers!\n\nLet's write a class that will simulate something that a `Pharmacy` might ship to a `Hospital` but is not a `Medicine` -- a medical device. We will assume that the device is a Jarvik Artifical Heart -- `Jarvik`. Create the `Jarvik` class in the `Jarvik.java` file with the following code:\n\n\n```Java\npublic class Jarvik {\n  Jarvik(String deviceSerialNumber) {\n    serialNumber = deviceSerialNumber;\n  }\n\n  public String getMedicineName() {\n    return \"Jarvik Artificial Heart\";\n  }\n\n  public MedicineSchedule getSchedule() {\n    return MedicineSchedule.Uncontrolled;\n  }\n\n  public String getSerialNumber() {\n    return serialNumber;\n  }\n\n  public boolean isTemperatureRangeAcceptable(Double lowTemperature, Double highTemperature) {\n    if (30.0 <= lowTemperature && highTemperature <= 90.0) {\n      return true;\n    }\n    return false;\n  }\n\n  private String serialNumber;\n}\n```\n\nNow we'll upgrade the simulation so that the `Pharmacy` attempts to ship one of these miracle devices to the `Hospital`:\n\n```Java\n    public boolean send(Transporter t) {\n        Medicine advil = new Ibuprofen();\n        if (t.load(advil)) {\n            System.out.println(String.format(\"Sending %s on the %s transporter.\", advil.getMedicineName(),\n                    t.getTransporterName()));\n        } else {\n            System.out.println(String.format(\"Cannot load %s on to the %s transporter.\", advil.getMedicineName(),\n                    t.getTransporterName()));\n            return false;\n        }\n\n        Medicine activase = new Thrombolytic();\n        if (t.load(activase)) {\n            System.out.println(String.format(\"Sending %s on the %s transporter.\", activase.getMedicineName(),\n                    t.getTransporterName()));\n        } else {\n            System.out.println(String.format(\"Cannot load %s on to the %s transporter.\", activase.getMedicineName(),\n                    t.getTransporterName()));\n            return false;\n        }\n\n        Medicine oxycontin = new Oxycodone();\n        if (t.load(oxycontin)) {\n            System.out.println(String.format(\"Sending %s on the %s transporter.\", oxycontin.getMedicineName(),\n                    t.getTransporterName()));\n        } else {\n            System.out.println(String.format(\"Cannot load %s on to the %s transporter.\", oxycontin.getMedicineName(),\n                    t.getTransporterName()));\n            return false;\n        }\n\n        Jarvik heart = new Jarvik(\"01j9a9lk71\");\n        if (t.load(heart)) {\n            System.out.println(String.format(\"Sending %s on the %s transporter.\", heart.getMedicineName(),\n                    t.getTransporterName()));\n        } else {\n            System.out.println(String.format(\"Cannot load %s on to the %s transporter.\", heart.getMedicineName(),\n                    t.getTransporterName()));\n            return false;\n        }\n\n        return true;\n    }\n```\n\nIf we ran the simulation that contained this version of the `load` method in the `Pharmacy` class (which we can't -- again, see below), we would get a very unhappy JVM: It would report an error when it attempted to perform the cast between the unloaded item and `Medicine`!\n\n```\nException in thread \"main\" java.lang.ClassCastException: class edu.uc.cs3003.medava.Jarvik cannot be cast to class edu.uc.cs3003.medava.Medicine (edu.uc.cs3003.medava.Jarvik and edu.uc.cs3003.medava.Medicine are in unnamed module of loader 'app')\n        at edu.uc.cs3003.medava.Hospital.receive(Hospital.java:10)\n        at edu.uc.cs3003.medava.HospitalRunner.run(HospitalRunner.java:13)\n        at edu.uc.cs3003.medava.SupplyChain.main(SupplyChain.java:6)\n```\n\nWhy? Because the `Hospital` eventually unloads an instance of the `Jarvik` class and that is *not* an instance of `Medicine` (or one of its subtypes) so the cast is invalid! But, but, but -- I know, I see it, too!\n\n`Jarvik` *is* a class that implements all the methods that we need to be able to add it to the `Transporter` -- there's a `getMedicineName`, there's a `isTemperatureRangeAcceptable`, there's even a `getSchedule`, even though it doesn't necessarily make sense. Java is [not impressed](). That static cast cannot complete because the static cast relies on _nominal type equivalency_ and a `Jarvik` is not a `Medicine` (or subtype thereof). If Java used structural type equivalency, then we might have had a chance! But here ... no dice!\n\n## Mirror, Mirror On The Wall!\n\nWe've avoided the elephant in the room for long enough -- none of the changes that we made above even yielded code that compiled let alone executed correctly! The compiler first encounters a problem in the `load` method of the `Transporter` class! Why? Because the `load` method relies on the fact that it can invoke a method named `isTemperatureRangeAcceptable` on the item to load to determine whether to follow the client's command.\n\nBut, again, the type of the parameter is `Object` (because we wanted our `Transporter` to have maximum flexibility)! We know that casting is probably not a good solution. I mean, how could we determine how to write the cast when we've left ourselves wide open to accepting an instance of absolutely any Java type?\n\nThere's still hope, though! Java provides an amazing set of functionality under the umbrella of _reflection_. Reflection is a feature of a programming language that \"allows its programs to have run-time access to their types and structures and to be able to dynamically modify their behavior.\" (Sebesta)\n\nOur simulation software (in particular, the `Transporter` and `Hospital` class) can use reflection to dynamically check whether the item to be loaded and shipped has the proper validation methods (i.e., `isTemperatureRangeAcceptable`, `getSchedule`, `getMedicineName`). Based on the result of that check, the `Transporter` and `Hospital` classes will modify their behavior:\n\n1. In the `Transporter` class, if the `isTemperatureRangeAcceptable` function is not available on the method being `load`ed, the function will assume that it cannot be added to the transporter's cargo bay; if the validation method *is* available, then the `load` method of the `Transporter` class will call it just as it did before to make the \"can ship\" determination!\n1. In the `Hospital` class, if the `getSchedule` method is not available during `receive`, the method will assume that it cannot be received; if the validation method *is* available, then the `receive` method of the `Hospital` class will call it just as it did before!\n\nTotally, totally cool! The syntax of reflection is a little mind bending and a little meta. Here's the updated code for the `load` method of the `Transporter` class:\n\n```Java\n    public boolean load(Object itemToLoad) {\n        try {\n            Method isTemperatureRangeAcceptableMethod = itemToLoad.getClass().getMethod(\"isTemperatureRangeAcceptable\",\n                    Double.class, Double.class);\n            boolean resultOfMethodCall = (boolean) isTemperatureRangeAcceptableMethod.invoke(itemToLoad,\n                    Double.valueOf(mLowTemperature), Double.valueOf(mHighTemperature));\n            if (resultOfMethodCall) {\n                goods.add(itemToLoad);\n            }\n            return resultOfMethodCall;\n        } catch (NoSuchMethodException | SecurityException | IllegalAccessException | IllegalArgumentException\n                | InvocationTargetException e) {\n            return false;\n        }\n    }\n```\n\nYou will also need to `import` the appropriate, supporting packages:\n\n```Java\nimport java.lang.reflect.InvocationTargetException;\nimport java.lang.reflect.Method;\n```\n\nThere is definitely a ton going on here. First, we see a new type of control-flow construct known as the `try`-`catch` statement. The semantics go like this: The statements in the so-called `try` block are executed from top to bottom. If any of those statements (or in statements that are in methods called by those statements, and so on!) _throws_ an exception, we know that an unexpected situation has transpired! The exception that is _thrown_ is an object just like anything else in Java and, therefore, has a type and a value. The `catch` phrase (get it?) lists a sequence of types and then gives a variable name. Java looks sequentially throw the `catch` phrases to find a class that matches the *actual* type of the thrown exception. The code in the first matching phrase is executed with the exception assigned to the named variable (`e` in this case).\n\nHere is a stripped down example of code that uses `try`-`catch` to show just how flexible Java is with respect to handling exceptions:\n\n```Java\n      try {\n            ...\n            throw new BadHairDayException();\n            ...\n        } catch (BadNameException bne) {\n            System.out.println(\"There was a bad name exception.\");\n        } catch (BadHairDayException bhde) {\n            System.out.println(\"There was a bad hair day exception.\");\n        } catch (Exception bae) {\n            System.out.println(\"There was a generic exception.\");\n        }\n```\n\nwill print\n\n```console\nThere was a bad hair day exception.\n```\n\nOn the other hand,\n\n```Java\n      try {\n            ...\n            throw new BadNameException();\n            ...\n        } catch (BadNameException bne) {\n            System.out.println(\"There was a bad name exception.\");\n        } catch (BadHairDayException bhde) {\n            System.out.println(\"There was a bad hair day exception.\");\n        } catch (Exception bae) {\n            System.out.println(\"There was a generic exception.\");\n        }\n```\n\nwill print\n\n```console\nThere was a bad name exception.\n```\n\nBecause every exception is ultimately a subclass of `Exception`, we can add an exception handler that will match any thrown exception:\n\n```Java\n      try {\n            ...\n            throw new BadAttitudeException();\n            ...\n        } catch (BadNameException bne) {\n            System.out.println(\"There was a bad name exception.\");\n        } catch (BadHairDayException bhde) {\n            System.out.println(\"There was a bad hair day exception.\");\n        } catch (Exception bae) {\n            System.out.println(\"There was a generic exception.\");\n        }\n```\n\nwill print\n\n```console\nThere was a generic exception.\n```\n\nNow, let's get on with the real work. Our first task is to determine if the object the user wants to load has a method of a certain name and, if so, whether that method takes the types of parameters that we expect it to. The `getMethod` method takes the name of the method in question as the first parameter and then a variably sized list of *classes* that describe the parameters of the method named in the first parameter:\n\n```Java\n            Method isTemperatureRangeAcceptableMethod = itemToLoad.getClass().getMethod(\"isTemperatureRangeAcceptable\",\n                    Double.class, Double.class);\n```\n\nis searching `itemToLoad` to find a handle for a method named `isTemperatureRangeAcceptable` that takes two `Double` instances as parameters. If there is no such method (or some other error occurs), then an exception is thrown. As soon as the first exception is thrown in a `try` block, no further code in the `try` block is executed! Our `catch` block simply returns `false` to indicate (defensively) that the item to be loaded cannot be shipped in the current transporter. The method handle that is (conditionally) found is an instance of a class -- just like *everything* in Java (with a few exceptions). That class offers its clients an `invoke` method that gives us the power to invoke that found method on a particular object with a particular set of parameters. If you squint,\n\n\n```Java\n            boolean resultOfMethodCall = (boolean) isTemperatureRangeAcceptableMethod.invoke(itemToLoad,\n                    Double.valueOf(lowTemperature), Double.valueOf(highTemperature));\n```\n\nlooks very much like\n\n```Java\n\n        boolean resultOfMethodCall = itemToLoad.isTemperatureRangeAcceptable(lowTemperature, highTemperature);\n```\n\nand that's no coincidence -- they are doing the exact same thing!\n\nNow, if you don't think *that's* cool, then ...\n\nRemember all that time ago when we talked about *why* we had to define the `isTemperatureRangeAcceptable` to take two `Double`s (which are actually classes and not primitives) instead of `double`s (which are primitives and not classes)? Well, now you know the answer. If we declared the `isTemperatureRangeAcceptable` method in a way that it took two primitive `double`s we would not have been able to use reflections's `getMethod` function. Do you see the problem? The `getMethod` method expects its caller to describe the method to be looked up to have parameters that can be described with a list of classes. Well, primitives do not have classes. So, we defined the function to take `Double`s -- a class that basically mimics the equivalent primitive type. Yes, it *is* annoying!\n\nNow let's turn our attention to the `Hospital` class and reflect (hi-ooooooooooooo) on the code there. The troublesome spot is the `receive` function where the `Hospital` assumes that the object unloaded from the `Transporter` has a certain set of methods. We will use reflection and the `getMethod` function to determine whether each object that is unloaded supports the required methods. Upgrade the `receive` method with the following code:\n\n```Java\n\n    void receive(Transporter t) {\n        while (!t.isEmpty()) {\n            try {\n                Object unloaded = t.unload();\n                Method getScheduleMethod = unloaded.getClass().getMethod(\"getSchedule\");\n                MedicineSchedule getScheduleMethodResult = (MedicineSchedule) getScheduleMethod.invoke(unloaded);\n                Method getMedicineNameMethod = unloaded.getClass().getMethod(\"getMedicineName\");\n                String getMedicineNameMethodResult = (String) getMedicineNameMethod.invoke(unloaded);\n                System.out.println(String.format(\"Checking whether Hospital can receive %s.\", getMedicineNameMethodResult));\n                if (getScheduleMethodResult != MedicineSchedule.Uncontrolled) {\n                    System.out.println(String.format(\"Hospital cannot receive controlled substances and %s is a %s.\",\n                            getMedicineNameMethodResult, getScheduleMethodResult.asString()));\n                } else {\n                    System.out.println(String.format(\"Accepted a shipment of %s.\", getMedicineNameMethodResult));\n                }\n            } catch (NoSuchMethodException | SecurityException | IllegalAccessException | IllegalArgumentException\n                    | InvocationTargetException e) {\n                // No need to do anything\n            }\n        }\n    }\n```\n\nDon't forget to add the import statements:\n\n\n```Java\nimport java.lang.reflect.InvocationTargetException;\nimport java.lang.reflect.Method;\n```\n\n## Checkpoint 5:\n\nMake sure that your program outputs the following. If it does not, go back and check for errors!\n\n```\nSending Ibuprofen on the Priority Dispatch transporter.\nGetting the minimum safe temperature for a Thrombolytic drug.\nGetting the maximum safe temperature for a Thrombolytic drug.\nSending Thrombolytic on the Priority Dispatch transporter.\nSending Oxycodone on the Priority Dispatch transporter.\nSending Jarvik Artificial Heart on the Priority Dispatch transporter.\nChecking whether Hospital can receive Ibuprofen.\nAccepted a shipment of Ibuprofen.\nChecking whether Hospital can receive Thrombolytic.\nAccepted a shipment of Thrombolytic.\nChecking whether Hospital can receive Oxycodone.\nHospital cannot receive controlled substances and Oxycodone is a Schedule Two Medicine.\nChecking whether Hospital can receive Jarvik Artificial Heart.\nAccepted a shipment of Jarvik Artificial Heart.\n```\n\n## Who's the Fairest of Them All\n\nReflection is a really powerful technique and a tool that we appreciate having in the toolchest. However, we should not rely on it when there are alternate methods. Reflection is definitely not the fastest way to accomplish our goal here. Determining at runtime whether an object supports certain methods is much slower than letting the compiler do it before the program is ever even executed.\n\nDoes Java give us a way to solve the problem? Let's first remind ourselves what the problem actually is:\n\n1. We have a generic data structure (in this case the `Transporter` and `Hospital` classes) that works with instances of a wide range of classes where the only requirement on those objects' types is that they support a (very limited) number of methods (e.g., the `isTemperatureRangeAcceptable`, `getSchedule`, and `getMedicineName` methods).\n2. The range of instances that the generic data structure must handle are of types that do not share a common base class.\n\nThe solution is one that is becoming increasingly common in OOP language and others that do not fit the traditional model of object orientation (e.g., go, and Rust): interfaces (go calls them [interfaces](https://go.dev/ref/spec#Interface_types) and Rust calls them [traits](https://doc.rust-lang.org/book/ch10-02-traits.html))\n\nIn Java, a programmer declares an interface using a syntax highly reminiscent of a class. The difference is that\n\n1. There are no constructors\n2. There are no fields\n3. The method declarations don't have implementations\n\nHere is the interface that we are going to define for our simulation:\n\n```Java\npublic interface Shippable {\n  public MedicineSchedule getSchedule();\n  public String getMedicineName();\n  public boolean isTemperatureRangeAcceptable(Double lowTemperature, Double highTemperature);\n}\n```\n\nAdd that to the `Shippable.java` file.\n\nOnce the interface is defined, we can use it in place of a type throughout Java. Use of an interface in place of a type in the code lets the compiler guarantee the object implements *at least* the methods declared in the interface. The object might support additional methods (the compiler won't know what they are!), but it guarantees that it is safe for us programmers to invoke at least those methods on that variable!\n\nWe previously used classes and inheritance to solve this very problem. However, remember above why we ended up deciding to use an `Object` as the type of the parameter to the `load` and `receive` methods: Because there was nothing else that a `Medicine` and, say, a `Jarvik` artificial heart have in common. The only thing that the objects we want to ship have in common are a certain set of methods. Interfaces give us the power to express just that requirement to the compiler, and nothing more! Pretty amazing!\n\nLet's change the `Transporter` class to use the `Shippable` interface. First, modify the `goods` declaration:\n\n```Java\nprivate List<Shippable> goods;\n```\n\nand its instantiation in the instance initializer:\n\n```Java\n        goods = new ArrayList<Shippable>();\n```\n\nThen we'll change the methods `load` and `unload`. When you make the following changes, ***do not delete the version of the code that uses reflection -- just comment it out***.\n\n```Java\n    public Shippable unload() {\n        return goods.remove(0);\n    }\n\n    public boolean load(Shippable itemToLoad) {\n        if (itemToLoad.isTemperatureRangeAcceptable(mLowTemperature, mHighTemperature)) {\n            return goods.add(itemToLoad);\n        }\n        return false;\n    }\n```\n\nNow, remind me where that other use of reflection was that we want to remove? Oh, right! The `Hospital`. We'll change the implementation of the `receive` method. Again, when you make the following changes, ***do not delete the version of the code that uses reflection -- just comment it out***.\n\n```Java\n    void receive(Transporter t) {\n        while (!t.isEmpty()) {\n            Shippable unloaded = t.unload();\n            System.out.println(String.format(\"Checking whether Hospital can receive %s.\", unloaded.getMedicineName()));\n            if (unloaded.getSchedule() != MedicineSchedule.Uncontrolled) {\n                System.out.println(String.format(\"Hospital cannot receive controlled substances and %s is a %s.\",\n                        unloaded.getMedicineName(), unloaded.getSchedule().asString()));\n            } else {\n                System.out.println(String.format(\"Accepted a shipment of %s.\", unloaded.getMedicineName()));\n            }\n        }\n    }\n```\n\nThe final step is to confirm with Java that our `Medicine` class (and its subclasses) and `Jarvik` class meet the specifications of the `Shippable` interface. To do that we use the `implements` keyword (you may resume making overwriting changes now!):\n\n```Java\npublic class Jarvik implements Shippable {\n    ...\n}\n```\n\n```Java\npublic abstract class Medicine implements Shippable {\n    ...\n}\n```\n\nAll done! That looks so much better than the treacherous solution using reflection or the code that lives dangerously by doing wildly optimistic casts between types!\n\n## Checkpoint Omega\n\nMake sure that your program in its final state has the following output:\n\n```\nSending Ibuprofen on the Priority Dispatch transporter.\nGetting the minimum safe temperature for a Thrombolytic drug.\nGetting the maximum safe temperature for a Thrombolytic drug.\nSending Thrombolytic on the Priority Dispatch transporter.\nSending Oxycodone on the Priority Dispatch transporter.\nSending Jarvik Artificial Heart on the Priority Dispatch transporter.\nChecking whether Hospital can receive Ibuprofen.\nAccepted a shipment of Ibuprofen.\nChecking whether Hospital can receive Thrombolytic.\nAccepted a shipment of Thrombolytic.\nChecking whether Hospital can receive Oxycodone.\nHospital cannot receive controlled substances and Oxycodone is a Schedule Two Medicine.\nChecking whether Hospital can receive Jarvik Artificial Heart.\nAccepted a shipment of Jarvik Artificial Heart.\n```\n\n## Conclusion\n\nSome would say that we are all just living in a giant computer simulation. I don't believe it. However, we did work our way through creation of a very powerful simulation system that takes advantage of some very interesting parts of the Java OOP language. We learned about Java's\n\n1. support for inheritance\n2. static methods\n3. abstract classes and methods\n4. support for virtual methods using the `@Override` annotation\n5. support for enumerated types with the `enum` class\n6. tools for reflection\n7. interfaces.\n\nThis quick walk through only scratches on the surface of Java's power. It is a very interesting language and I encourage you to continue to learn more about it as you grow as professional programmers.\n\n## One More Thing ...\n\nAlong with the code that you've written, for this assignment please create and submit a file named `questions.txt` (a plain text file) that contains several (the number is up to you) questions you had about Java as we worked through the material above. The list of questions is worth 1/2 of your grade for this assignment. Please make them thoughtful. I will grade them based on how well they reflect your engagement with the material above and the Java language overall. Feel free to include questions you have about OOP, in general, too. To be clear: I do not expect you to *know* the answer to the questions! In fact, quite the opposite! The more befuddled you are about something, the more likely that we will learn something together (because I can assure you that your questions will make me think!).\n\n## Submitting\n\nYou will submit your response to this assignment to Gradescope as we have done in previous assignments. The autograder will expect that you submit *all* the `.java` files, the `pom.xml` file and a `questions.txt` file (in the same directory structure as they are in the skeleton). The easiest way to accomplish this gargantuan task is to create a zip file. Make sure that `pom.xml` and `questions.txt` are in the root of the directory structure of the zip file that you create. ***Please do not*** include any `.class` files (in other words, do not include the `target/` directory) in your submission. Make sure that the autograder awards you 50 points after you submit your code. If you have any trouble navigating the autograder's idiosyncracies, please contact me!"
  },
  {
    "name": "Pendleton-Properties",
    "full_name": "Kartavya904/Pendleton-Properties",
    "description": "This is the private repository for Pendleton Properties",
    "html_url": "https://github.com/Kartavya904/Pendleton-Properties",
    "language": "HTML",
    "visibility": "private",
    "created_at": "2024-01-09T16:45:23Z",
    "updated_at": "2024-01-09T16:46:35Z",
    "pushed_at": "2024-03-21T15:09:41Z",
    "stargazers_count": 0,
    "forks_count": 0
  },
  {
    "name": "Programming-Assignment-2",
    "full_name": "Kartavya904/Programming-Assignment-2",
    "description": "This is the repository for the Programming Assignment - 2, by Kartavya Singh",
    "html_url": "https://github.com/Kartavya904/Programming-Assignment-2",
    "language": "Python",
    "visibility": "public",
    "created_at": "2024-12-04T17:47:10Z",
    "updated_at": "2025-03-26T01:33:00Z",
    "pushed_at": "2025-03-26T01:32:57Z",
    "stargazers_count": 0,
    "forks_count": 0,
    "readme": "# Bulletin Board System\r\n\r\n## Overview\r\n\r\nA Python-based Bulletin Board System implementing both a **Command-Line Interface (CLI)** and a **Graphical User Interface (GUI)** for user interaction. The project features a server-client architecture for managing public and private message boards using socket programming.\r\n\r\nPresented by Kartavya Singh (Singhk6) (M14537829)\r\n\r\n## Features\r\n\r\n- **Public Message Board**:\r\n  - Send messages, view active users, and retrieve specific messages.\r\n- **Private Message Boards**:\r\n  - Join rooms, send messages, and manage room interactions.\r\n- **GUI**:\r\n  - User-friendly interface with separate sections for command feedback and chat messages.\r\n\r\n## Usage\r\n\r\n1. **Run the Backend Server**:\r\n   ```bash\r\n   python backend.py\r\n   ```\r\n2. **Run the Frontend Client**:\r\n   - **CLI**:\r\n   ```bash\r\n   python client.py\r\n   ```\r\n   - **GUI**:\r\n   ```bash\r\n   python gui_client.py\r\n   ```"
  },
  {
    "name": "Random-Project",
    "full_name": "Kartavya904/Random-Project",
    "description": "Not Correct MakeUC-Hackathon-2024 Private Repository",
    "html_url": "https://github.com/Kartavya904/Random-Project",
    "language": "Python",
    "visibility": "private",
    "created_at": "2024-11-04T05:50:42Z",
    "updated_at": "2024-11-09T18:22:22Z",
    "pushed_at": "2024-11-09T00:26:40Z",
    "stargazers_count": 0,
    "forks_count": 0,
    "readme": "# Beach Cleanup Adventure 🌊\n\n**Beach Cleanup Adventure** is an educational Python game focused on environmental awareness. Players collect trash on a beach, leveling up to unlock real-world environmental facts. The game encourages learning about pollution and conservation through gameplay.\n\n## Features\n- **Account Management**: Create, log in, and track progress.\n- **Beach Exploration**: Navigate a virtual beach and collect trash items that spawn at random locations.\n- **Storage and Scoring Mechanic**: Collect as much trash as your storage allows, deposit it in the central trash bin to free up storage, and continue collecting.\n- **Leveling System**: Level up as you collect more trash and complete quests, which increases your storage capacity and challenges.\n- **Environmental Facts**: Unlock real-world environmental facts based on your score. Higher levels reveal more impactful facts, educating players on the effects of pollution and conservation efforts.\n- **Session History**: View previous sessions, unlocked facts, and your cumulative impact on environmental conservation.\n\n## Game Flow\n1. **Account Creation**: Register to start at Level 1.\n2. **Gameplay**: Collect trash on the beach, deposit it to clear storage, and gain points.\n3. **Level Progression**: Unlock harder challenges and impactful facts with each level.\n4. **Session Summary**: View total trash collected, score, and new facts at the end of each game.\n\n\n## Installation\n\n1. **Clone the Repo**:\n   ```bash\n   git clone https://github.com/yourusername/beach-cleanup-adventure.git\n   cd beach-cleanup-adventure\n2. **Install Dependencies**:\n    pip install -r requirements.txt\n3. **Run the Game**:\n    python main.py\n\n\n## Tech Stack\n- **Python**: Main programming language\n- **MongoDB**: Database for user data and game sessions\n- **Pygame** (optional): For graphical interface\n- **pymongo**: MongoDB connection\n- **bcrypt**: Password hashing for security\n\n## Future Enhancements\n- **Expanded Maps**: Add different ecosystems.\n- **Leaderboard**: Track top scores for competitive play."
  },
  {
    "name": "RevUC-Hackathon-2024",
    "full_name": "Kartavya904/RevUC-Hackathon-2024",
    "html_url": "https://github.com/Kartavya904/RevUC-Hackathon-2024",
    "language": "HTML",
    "visibility": "private",
    "created_at": "2024-02-12T05:35:20Z",
    "updated_at": "2024-02-24T05:10:57Z",
    "pushed_at": "2024-02-24T06:48:57Z",
    "stargazers_count": 0,
    "forks_count": 0,
    "readme": "# RevUC-Hackathon-2024\r\n\r\nHealthSphere Project Setup Guide\r\nThis guide provides step-by-step instructions to set up and run the HealthSphere project on your computer.\r\n\r\nPrerequisites\r\nBefore you begin, ensure that you have the following installed on your computer:\r\n\r\nPython 3.x\r\nNode.js and npm\r\nSteps to Set Up Flask Server\r\nOpen a terminal.\r\n\r\nNavigate to the flask-server directory:\r\n\r\n\r\ncd flask-server\r\nCreate a virtual environment named venv:\r\n\r\n\r\n\r\npython -m venv venv\r\nActivate the virtual environment:\r\n\r\nOn Windows:\r\n\r\n\r\nvenv\\Scripts\\activate\r\nOn macOS/Linux:\r\n\r\n\r\nsource venv/bin/activate\r\nInstall the required Python dependencies using pip:\r\n\r\n\r\n\r\npip install -r requirements.txt\r\nOnce all packages are installed, start the Flask server:\r\n\r\n\r\n\r\npython server.py\r\nSteps to Set Up React Client\r\nOpen another terminal.\r\n\r\nNavigate to the client-react-app directory:\r\n\r\n\r\n\r\ncd client-react-app\r\nInstall the Node.js dependencies using npm:\r\n\r\n\r\n\r\nnpm install\r\nAfter all dependencies are installed, start the React development server:\r\n\r\n\r\n\r\nnpm start\r\nYour default web browser should automatically open to http://localhost:3000, and you should see the HealthSphere application running.\r\n\r\nUsage\r\nOnce both Flask server and React client are running, you can access the HealthSphere application by navigating to http://localhost:3000 in your web browser.\r\n\r\nYou can sign up for a new account or log in with existing credentials to access the HealthSphere dashboard and other features."
  },
  {
    "name": "Robot-Codes",
    "full_name": "Kartavya904/Robot-Codes",
    "html_url": "https://github.com/Kartavya904/Robot-Codes",
    "language": "Python",
    "visibility": "public",
    "created_at": "2022-03-29T23:43:57Z",
    "updated_at": "2022-05-08T17:44:07Z",
    "pushed_at": "2022-05-08T17:43:44Z",
    "stargazers_count": 0,
    "forks_count": 0
  },
  {
    "name": "Showtime-Auto-Detailing",
    "full_name": "Kartavya904/Showtime-Auto-Detailing",
    "description": "Public Repo for Showtime Auto Detailing Website for Michael",
    "html_url": "https://github.com/Kartavya904/Showtime-Auto-Detailing",
    "language": "HTML",
    "visibility": "public",
    "created_at": "2024-04-23T01:49:10Z",
    "updated_at": "2024-05-01T23:41:25Z",
    "pushed_at": "2024-05-01T23:41:22Z",
    "stargazers_count": 0,
    "forks_count": 0
  },
  {
    "name": "Snakes-Game-Deep-Reinforcement-Learning",
    "full_name": "Kartavya904/Snakes-Game-Deep-Reinforcement-Learning",
    "description": "This is one of my old projects that I created. developed a deep reinforcement learning-based Snake game, where the snake learns to navigate and optimize its gameplay strategy through AI-driven algorithms.",
    "html_url": "https://github.com/Kartavya904/Snakes-Game-Deep-Reinforcement-Learning",
    "language": "Python",
    "visibility": "public",
    "created_at": "2024-11-05T00:58:25Z",
    "updated_at": "2025-01-28T04:23:28Z",
    "pushed_at": "2024-11-05T01:02:35Z",
    "stargazers_count": 1,
    "forks_count": 0
  },
  {
    "name": "stimpl",
    "full_name": "Kartavya904/stimpl",
    "description": "Skeleton implementation of STIMPL ",
    "html_url": "https://github.com/Kartavya904/stimpl",
    "language": "Python",
    "visibility": "public",
    "created_at": "2023-11-19T04:09:24Z",
    "updated_at": "2023-11-19T04:52:19Z",
    "pushed_at": "2023-11-19T05:04:55Z",
    "stargazers_count": 0,
    "forks_count": 0,
    "readme": "# STIMPL\n\n<img src=\"./assets/stimpy.png\" align=\"left\">\n\nSTIMPL is a Turing-complete imperative programming language -- it includes dynamically typed variables, mathematical expressions, (basic) console IO, loops, and conditionals. Though the binding of variables to types is done at runtime (in particular, the time of the first assignment), the language is strongly typed -- type errors are always detected! STIMPL has no scopes and no functions.\n\nIn STIMPL, *everything* is an expression. There are no statements. The *syntax* of STIMPL might look a little odd. It's not like any other programming language you might have seen. That's because the syntax that you are going to write does not have to be the *only* syntax that STIMPL supports. Think about the syntax that you are going to learn for STIMPL as the syntax you would use to write down (*serialize*) the abstract syntax tree for a valid STIMPL program. As we discussed in the Module on Syntax and Grammars, a parser will turn the source code for a program into a tree that represents the different components of a program. When you write your STIMPL programs in the syntax defined here, you are allowing us to skip the step of writing the grammar/parser/etc and giving us the freedom to jump to the fun part of building a language -- implementing its behavior!\n\nHere is a short example STIMPL program that assigns the value of `4` (as an integer type which results from adding together two literal `2`s) to a variable `four`:\n\n```\nProgram(Assign(Variable(\"four\"), Add(IntLiteral(2), IntLiteral(2))))\n```\n\nYou can _read_ that program like this:\n\n> Assign variable `four` to the result of the addition of the integer literal 2 with the integer literal of 2.\n\nAgain, everything in STIMPL is an expression. In other words, everything in STIMPL has a type and a value. The most basic expression in STIMPL is the _ren_ \\-- it has no value (`None`) and a _unit_ type. In STIMPL you generate a ren like\n\n```\nRen()\n```\n\nIn STIMPL, you reference variables like\n\n```\nVariable(\"i\")\n```\n\nVariable names are case sensitive in STIMPL.\n\nA STIMPL program is a sequence of expressions:\n\n```\nProgram(Ren(), Ren(), Ren())\n```\n\nThe program above simply does nothing three times. In STIMPL, a sequence is synonymous with a program:\n\n```\nSequence(Ren(), Ren(), Ren())\nProgram(Ren(), Ren(), Ren())\n```\n\nare exactly the same. In general, the syntax for a program or sequence is `Program(`_expression_`[, `_expression_`[,...]])` or `Sequence(`_expression_`[, `_expression_`[,...]])`, respectively, where _expression_ is any expression (even another program or sequence because, again, *everything* in STIMPL is an expression!).\n\nThe value and type of a sequence/program of expressions are the value and type of the final expression in the sequence/program. For example:\n\n```\nProgram(Assign(Variable(\"five\"), IntLiteral(10)),\\\n      IntLiteral(1))\n```\n\nand\n\n```\nSequence(Assign(Variable(\"five\"), IntLiteral(10)),\\\n      IntLiteral(1))\n```\n\nhave a value of 1 and type of integer.\n\nYes, STIMPL supports empty `Program`s and `Sequence`s. The value and type of such a `Program`/`Sequence` is `None` and _unit_, respectively.\n\nIt stands to reason that because every expression in STIMPL has a value and a type, an assignment expression has a value and a type. An assignment expression's value and type are the value assigned and its type. For example, the assignment expression\n\n`Assign(Variable(\"five\"), IntLiteral(10))`\n\nhas a value of 10 and a type of integer.\n\nIn STIMPL, it's easy to print the value of an expression to the screen:\n\n`Print(Ren())`\n\nprints the value of the _ren_ to the screen. In general, the syntax for printing an expression is `Print(`_expression_`)` where _expression_ is any expression.\n\nSTIMPL has _boolean_, _string_, _floating-point number,_ _integer_, and _unit_ types. You can perform the normal mathematical operations on integers and floating-point numbers:\n\n```\nSequence(\\\n      Add(FloatingPointLiteral(5.0), FloatingPointLiteral(5.0)),\\\n      Subtract(IntLiteral(5), IntLiteral(5)),\\\n      Multiply(IntLiteral(5), IntLiteral(5)),\\\n      Divide(FloatingPointLiteral(25.0), FloatingPointLiteral(25.0)))\n```\n\n_**All operands are evaluated left-to-right.**_\n\nYou can also perform \"addition\" on strings -- concatenation:\n\n```\nAdd(StringLiteral(\"testing\"), StringLiteral(\", one two three.\"))\n```\n\nAnd, we can't forget about booleans!\n\n```\nBooleanLiteral(True)\nBooleanLiteral(False)\n```\n\nYou can operate on booleans with logical ands, ors and nots:\n\n```\nAnd(BooleanLiteral(True), BooleanLiteral(False))\nOr(BooleanLiteral(True), BooleanLiteral(False))\nNot(BooleanLiteral(True))\n```\n\nAnd, you can create booleans with relational and equality operators:\n\n```\nLt(BooleanLiteral(False), BooleanLiteral(True))\nLte(IntLiteral(5), IntLiteral(5))\nEq(StringLiteral(\"testing\"), StringLiteral(\"testing\"))\nNe(StringLiteral(\"t3sting\"), StringLiteral(\"testing\"))\nGt(StringLiteral(\"beta\"), StringLiteral(\"alpha\"))\nGte(IntLiteral(5), IntLiteral(5))\n```\n\nThe relational and equality operators are defined on all types (see below for the exact details)!\n\nThat's all well and good and gives us the power to write sequential programs. But, what about programs that need to perform certain actions selectively? STIMPL has if expressions:\n\n```\nIf(And(BooleanLiteral(False), BooleanLiteral(True)),\\\n      Print(StringLiteral(\"Then\")),\\\n      Print(StringLiteral(\"Else\")))\n```\n\nwill print\n\n```\nElse\n```\n\nNot to sound like a broken record, but because everything in STIMPL is an expression, if expressions have a value and a type. The value and type of the expression in the example above are `\"Else\"` and string, respectively. In general, the syntax for an if expression is `If(condition, then, else)` where `condition` is any expression whose type is boolean and `then` and `else` are expressions. If you don't want to do anything in the case that `condition` is false, use `Ren()` as the `else` expression.\n\nAnd, don't forget loops:\n\n```\nProgram(\\\n      Assign(Variable(\"i\"), IntLiteral(0)),\\\n      While(Lt(Variable(\"i\"), IntLiteral(10)),\\\n        Sequence(\\\n          Assign(Variable(\"i\"), Add(Variable(\"i\"), IntLiteral(1))),\\\n          Print(Variable(\"i\")))\\\n        )\\\n      )\n```\n\nThat program will print:\n\n```\n1\n2\n3\n4\n5\n6\n7\n8\n9\n10\n```\n\nIn general, the format of a while-loop expression is `While(condition, body)` where `condition` is any expression with a boolean type and `body` is any expression. The value and type of a while loop are false and boolean.\n\n# STIMPL Requirements\n\n## Types\n\nAny time that there is a type error, STIMPL will raise an `InterpTypeError`. STIMPL has compile-time and runtime type errors. Here are the compile-time type rules:\n\n1.  Literals must be the appropriate type:\n    1.  An `IntLiteral` must be created from a Python `int`.\n    2.  A `FloatingPointLiteral` must be a Python `float`.\n    3.  A `StringLiteral` must be a Python `str`.\n    4.  A `BooleanLiteral` must be a Python `bool`.\n\nIf these rules are violated, STIMPL raises an `InterpTypeError` at the time the program is defined.\n\nHere are the runtime type rules:\n\n1.  The first assignment to a variable defines that variable's type.\n2.  Once a variable's type has been defined, only expressions of matching type can be assigned to that variable.\n3.  Both operands to binary operators must have the same type.\n4.  Relational operators are defined for (matching) operands of every type (see below for the exact details).\n5.  And/or/not operators are only defined for (matching) operands of boolean type.\n6.  Add, Subtract, Multiply and Divide operators are defined for (matching) operands of integer and floating-point types.\n7.  The add operator is defined for (matching) operands of string types and functions as string concatenation.\n8.  The condition expression in if/while expressions must have a boolean type.\n\nIf any of these these rules is violated, STIMPL raises an `InterpTypeError` at runtime.\n\n**Examples**\n\nBy compile-time type rule (1),\n\n```\nFloatingPointLiteral(10)\nIntLiteral(1.0)\nStringLiteral(True)\nBooleanLiteral(\"False\")\n```\n\nwill all cause `InterpTypeError`s. By runtime type rules (1) and (2),\n\n```\nProgram(\\\n      Assign(Variable(\"i\"), IntLiteral(10)),\\\n      Assign(Variable(\"i\"), FloatingPointLiteral(10.0))\\\n    )\n```\n\nwill cause a `InterpTypeError`. By runtime type rule (3)\n\n```\nAdd(IntLiteral(5), FloatingPointLiteral(10.0))\n```\n\nwill cause a `InterpTypeError`. By runtime type rule (5)\n\n```\nProgram(Not(IntLiteral(5)))\n```\n\nwill cause an `InterpTypeError`. By rule (8),\n\n```\nIf(IntLiteral(1),\n   IntLiteral(0),\\\n   IntLiteral(1))\n```\n\nwill cause an `InterpTypeError`.\n\n## Syntax\n\nBecause STIMPL programs are syntactically correct Python programs, most syntax errors (e.g., mismatched parenthesis) will be caught by the Python interpreter. However, there are two syntax errors that STIMPL handles explicitly:\n\n1.  It is a syntax error to assign to an expression that is not a variable. If this is detected, STIMPL raises an `InterpSyntaxError` at compile time.\n2.  It is a syntax error to read from a variable that does not have a value. If this is detected, STIMPL raises an `InterpSyntaxError` at runtime.\n\nBy rule (1),\n\n```\nProgram(Assign(IntLiteral(10), IntLiteral(10)))\n```\n\nwill cause an `InterpSyntaxError` at compile time. By rule (2),\n\n```\nProgram(Variable(\"i\"))\n```\n\nwill raise an `InterpSyntaxError` at runtime.\n\n## Semantics\n\n1.  Relational/equality operators behave \"as usual\" for integer and floating-point types.\n2.  Relational operators perform [lexicographical comparison](https://en.wikipedia.org/wiki/Lexicographic_order) for string types.\n3.  False is less than true.\n4.  Unit is equal to unit.\n5.  Boolean operators behave \"as usual\".\n6.  Add, Subtract, Multiply and Divide operators work \"as usual\" on floating-point values.\n7. The divide operator performs integer division when its parameters are integers (_e.g._, 5/10 = 0). When the operands to a division operator are both floating-points, then the result has \"precision\" (_e.g._, 5.0 / 10.0 = 0.5).\n8. An attempt to divide by zero (either floating-point or integer) raises an `InterpMathError`.\n9. Add operator performs string concatenation when its operands are string values.\n10. Operands are evaluated left-to-right.\n11. There is _no_ short-circuit evaluation.\n12. The body of a while loop is repeatedly executed until the condition becomes false.\n13. The then branch of an if statement is executed when the condition is true; the else branch of an if statement is executed otherwise.\n\n## Values and Types\n\n1. Literals have the expected values and types.\n2. The value and type of an assignment expression is the value and type of the right-hand side of the expression.\n3. The value and type of a relational expression is the result of the relation and its type is boolean.\n4. The value of a mathematical operation is the result of the mathematical operation and its type is integer or floating point, depending on the type of the parameters.\n5. The value and type of an if expression is the value and type of the last expression in the sequence of expressions executed based on the value of the condition.\n6. The value and type of a while expression is false and boolean.\n7. The value and type of a program/sequence expression is the value and type of the last expression in the program/sequence's body\n      - In the case where the body is empty, the value and the type of the program/sequence expression is ren and unit, respectively.\n\n### STIMPL Implementation\n\nYou have been given a significant amount of skeleton code to start your implementation. Begin this assignment by understanding what is included. The best way to learn your way around the skeleton code is to write some basic STIMPL programs and see what happens!\n\n## State\n\nAs the program executes, it always has a state to hold the current value of the program's variables and their types. The interpreter uses the `State` class defined and (partially) implemented in the provided code (`stimpl/runtime.py`) to manage the program's state. To update values in a state, use the `set_value` method. The `set_value` method takes three parameters: The variable name, the new variable value and the new variable type. **_`set_value` will not update the state in place -- it will return a copy of the existing state with the appropriate variable updated_**. To retrieve a value from the current state, use the `get_value` method. The `get_value` method returns a tuple whose first element is the variable value and whose second element is the variable type; if `get_value` is called for a variable that is not yet defined in the current state, `None` is returned.\n\n## Evaluate\n\n`evaluate` (`stimpl/runtime.py`) is the main driver of the STIMPL interpreter. As parameters, it takes a variable whose type is a STIMPL expression and a variable whose type is a program state.\n\n```Python\ndef evaluate(expression: Expr, state: State) -> Tuple[Optional[Any], Type, State]:\n```\n\nIt returns a tuple that contains\n1. (optional) value of the expression evaluated\n2. that value's type\n3. the (perhaps) updated state of the STIMPL program\n\n`evaluate` is implemented with pattern matching (see the related documentation on how to write code with pattern matching in Python available on the Canvas site for this course). The pattern matching code is used to determine the specific type of expression to be evaluated. The pattern (pun intended) of using pattern matching to implement an interpreter is incredibly common and used throughout the industry.\n\nHere are some examples of the return values of the `evaluate` function for certain STIMPL expressions.\n\nFor instance, if\n\n```\nVariable(\"i\")\n```\n\nand `State()` were passed as `expression` and `state` (respectively) to `evaluate`,\n\n```Python\ncase Variable(variable_name=variable_name):\nvalue = state.get_value(variable_name)\nif value == None:\n      raise InterpSyntaxError(\n            f\"Cannot read from {variable_name} before assignment.\")\nvariable_value, variable_type = value\nreturn (variable_value, variable_type, state)\n\n```\n\nwould execute. This implementation code generates a 3-tuple `(value, type, state)` where `value` and `type` are the value and type of `i`, respectively. Notice that the \"updated\" program state after evaluating this expression is no different than the program state before evaluating this expression. In other words, accessing the value of a variable does not change the program's state! Remember operational semantics!\n\nTake a very close look at the expressions that are already implemented in `evaluate` -- there is a pattern that should emerge that will help you implement the remaining functionality!\n\n## Interpreter Errors\n\nThere are two pre-defined exceptions for you to use to signal a program error -- `InterpTypeError` and `InterpSyntaxError` (`stimpl/errors.py`).  You can `raise` these exceptions to signal errors according to the specifications of STIMPL.\n\n## Types\n\nThere are classes already defined for the integer, floating-point, string and boolean types (`stimpl/types.py`). These classes already have built-in functionality for equality testing. In other words,\n```\n  FloatingPoint() == FloatingPoint()\n  String() == String()\n```\n\netc. You will want to use this built-in equality functionality when checking to make sure that operands to operators are of matching type and to determine, for example, whether an operand to a boolean operator is a boolean type.\n\n## Literals\n\nThere are classes already implemented for all literals (`stimpl/expression.py`). You may use these as they are -- they need no modification to meet the requirements of STIMPL.\n\n## Binary, Unary and Combining-Form Expressions\n\nThere are classes already implemented to hold the structure of the binary, unary and combining-form expressions (`stimpl/expression.py`). You may use these as they are -- they need no modification to meet the requirements of STIMPL.\n\n## Execution\n\n`run_stimpl` (`stimpl/runtime.py`) takes a STIMPL program as a parameter and evaluates it. `run_stimpl` takes an optional second parameter to control whether debugging output is enabled. Calling `run_stimpl` with `True` as the second parameter will cause debugging output to be produced during evaluation of the STIMPL program. If the argument is missing, the default is to suppress debugging output.\n\n## Testing\n\n`run_stimpl_sanity_tests` (`stimpl/test.py`) is a function that will help you determine whether your implementation is \"complete\". Based on the skeleton code provided, one (or many) tests may fail. Guide your work on this assignment by getting each of the tests in `run_stimpl_sanity_tests` to pass.\n\n# Assignment Requirements\n\nYour assignment is to build on the provided STIMPL code and complete the implementation of the interpreter. All pieces of the interpreter where you need to write code are listed with `TODO` markers. For instance,\n\n\n```Python\ndef get_value(self, variable_name) -> Any:\n      \"\"\" TODO: Implement. \"\"\"\n      return None\n```\n\n*Note*: Where there are `TODO`s, any return values are placeholders only. You may need to modify return values as part of your implementation.\n\nYou are responsible for implementing:\n\n| Class | Method | Expression Type |File |\n| -- | -- | -- | -- |\n| `State` | `get_value` | N/A | `stimpl/runtime.py` |\n| N/A | `evaluate` | `Sequence` | `stimpl/runtime.py` |\n| N/A | `evaluate` | `Program` | `stimpl/runtime.py` |\n| N/A | `evaluate` | `Subtract` | `stimpl/runtime.py` |\n| N/A | `evaluate` | `Multiply` | `stimpl/runtime.py` |\n| N/A | `evaluate` | `Divide` | `stimpl/runtime.py` |\n| N/A | `evaluate` | `Or` | `stimpl/runtime.py` |\n| N/A | `evaluate` | `Not` | `stimpl/runtime.py` |\n| N/A | `evaluate` | `If` | `stimpl/runtime.py` |\n| N/A | `evaluate` | `Lte` | `stimpl/runtime.py` |\n| N/A | `evaluate` | `Gt` | `stimpl/runtime.py` |\n| N/A | `evaluate` | `Gte` | `stimpl/runtime.py` |\n| N/A | `evaluate` | `Eq` | `stimpl/runtime.py` |\n| N/A | `evaluate` | `Ne` | `stimpl/runtime.py` |\n| N/A | `evaluate` | `While` | `stimpl/runtime.py` |\n\n## Getting Started\n\nThe first step is to download the skeleton code. It is available on GitHub at [https://github.com/hawkinsw/stimpl](https://github.com/hawkinsw/stimpl). If you are new to git/github, check out this [handbook](https://guides.github.com/introduction/git-handbook/) from GitHub or the project's [website](http://git-scm.com/).\n\nThe next step is to make sure that you have Python 3.10 installed and available. Python 3.10 is a very new version of Python and is a *requirement* for this assignment. If you do not have Python 3.10 you will not be able to complete this assignment. If you have trouble installing/configuring Python 3.10 on your computer, please reach out to me!\n\nThe final step before you get started programming is to make sure that you can execute the code in `shakedown_stimpl.py`. If you have a sane Python 3.10 installation and everything configured correctly, you should see\n\n```\nHello, World\n```\n\nprinted on the console when you execute `shakedown_stimpl.py`\n\nIn order to judge your progress on the assignment, use the code in `test_stimpl.py`. You will know that you are almost done with this assignment when you execute the code in that file and see\n\n```\nAll tests ran successfully!\n```\n\nprinted on the screen! In fact, if you see that message, you will know that your grade will be at least 80% (see below).\n\nThat said, there are *many* tests in that file and the output can be overwhelming. The best way to work on this project is to implement the evaluation functionality for different expressions one at a time. For each expression type that you implement, write very small, targeted STIMPL programs that use that expression and don't move on until your code works.\n\n## Grading\n\nYour grade will be calculated (out of 100 total possible points) according to the following rubric:\n\n|Points|Category|Description|\n|---|---|---|\n|  80 | Implementation completeness  |  You will receive up to 80 points depending on how many of the supplied tests pass on your implementation. See `stimply/test.py` for the exact relationship between points and tests. |\n|  10 | Robustness  | You will receive up to 10 points depending on whether your implementation passes additional robustness tests.  |\n| 10 | Hygiene | You will receive up to 10 points depending on the hygiene of your code -- good comments, good style, good variable names, modularity, etc. |\n\n\n## What And How To Submit\n\nAll submissions for this assignment will be made through Gradescope, as usual. Like the first assignment, Gradescope will be relatively picky about how you submit. The best advice I can give follows:\n\n1. Create a zip file that contains all your source code (yes, *all* your source code, even the code contained in the skeleton). \n1. In that zip file, make sure that `shakedown_stimpl.py` and `test_stimpl.py` are in the *root* folder.\n1. Submit to Gradescope by dragging/dropping that zip file on the modal dialog box that pops up when you click the `Submit` button. Your dialog box should look like the one shown below).\n\n![How your submission modal dialog box should look when you submit to Gradescope.](./assets/submission-modal.png)\n\nFor additional information, please watch the video about submitting (once it is available)."
  },
  {
    "name": "Test",
    "full_name": "Kartavya904/Test",
    "html_url": "https://github.com/Kartavya904/Test",
    "visibility": "private",
    "created_at": "2023-08-16T23:57:31Z",
    "updated_at": "2023-08-16T23:57:31Z",
    "pushed_at": "2023-08-16T23:57:31Z",
    "stargazers_count": 0,
    "forks_count": 0
  },
  {
    "name": "test-application",
    "full_name": "Kartavya904/test-application",
    "html_url": "https://github.com/Kartavya904/test-application",
    "language": "TypeScript",
    "visibility": "private",
    "created_at": "2024-02-11T00:37:57Z",
    "updated_at": "2024-02-11T00:38:03Z",
    "pushed_at": "2024-02-12T06:30:10Z",
    "stargazers_count": 0,
    "forks_count": 0
  },
  {
    "name": "Ty-Hogan-for-Ohio-Senate",
    "full_name": "Kartavya904/Ty-Hogan-for-Ohio-Senate",
    "html_url": "https://github.com/Kartavya904/Ty-Hogan-for-Ohio-Senate",
    "language": "JavaScript",
    "visibility": "private",
    "created_at": "2024-01-31T23:00:33Z",
    "updated_at": "2024-01-31T23:05:19Z",
    "pushed_at": "2024-02-13T16:16:52Z",
    "stargazers_count": 0,
    "forks_count": 0,
    "readme": "# Ty-Hogan-for-Ohio-Senate"
  },
  {
    "name": "2024-MakeUC-Hackathon",
    "full_name": "ShivamKGate/2024-MakeUC-Hackathon",
    "description": "This is the Public Repository for the MakeUC Hackathon for our Team consisting of Shivam Kharangate, Kartavya Singh, Nandini Agarwal, and Mahika Gunjkar.",
    "html_url": "https://github.com/ShivamKGate/2024-MakeUC-Hackathon",
    "language": "Python",
    "visibility": "public",
    "created_at": "2024-11-09T17:49:36Z",
    "updated_at": "2024-11-10T16:55:11Z",
    "pushed_at": "2024-11-10T16:42:18Z",
    "stargazers_count": 1,
    "forks_count": 1,
    "readme": "# Cleanify \r\n\r\n**Cleanify** is an educational Python game focused on environmental awareness. Players collect trash at different POVs, leveling up to unlock real-world environmental facts. The game encourages learning & educates users about pollution and conservation through gameplay.\r\n\r\n## Features\r\n- **Account Management**: Create Account, Log In, and Track Progress.\r\n- **Exploration**: Navigate a virtual POVs and collect trash items that spawn at random locations.\r\n- **Storage and Scoring Mechanic**: Collect as much trash as your storage allows, deposit it in the central trash bin to free up storage, and continue collecting.\r\n- **Leveling System**: Level up as you collect more trash and complete quests, which increases your storage capacity and challenges.\r\n- **Environmental Facts**: Unlock real-world environmental facts based on your score. Higher levels reveal more impactful facts, educating players on the effects of pollution and conservation efforts.\r\n- **Session History**: View previous sessions, unlocked facts, and your cumulative impact on environmental conservation.\r\n\r\n## Game Flow\r\n1. **Account Creation**: Register to start at Level 1.\r\n2. **Gameplay**: Collect trash on the beach, deposit it to clear storage, and gain points.\r\n3. **Level Progression**: Unlock harder challenges and impactful facts with each level.\r\n4. **Session Summary**: View total trash collected, score, and new facts at the end of each game.\r\n\r\n\r\n## Installation\r\n\r\n1. **Clone the Repo**:\r\n   git clone https://github.com/ShivamKGate/2024-MakeUC-Hackathon\r\n2. **Install Dependencies**:\r\n    python -m pip install -r requirements.txt\r\n3. **Create a .env file**:\r\n    create a .env file, and add ```MONGO_PASSWORD=2024-MakeUC-Hackathon```\r\n3. **Run the Game**:\r\n    python main.py\r\n\r\n## Tech Stack\r\n- **Python**: Main programming language\r\n- **MongoDB**: Database for user data and game sessions\r\n- **Pygame**: For graphical interface\r\n- **pymongo**: MongoDB connection\r\n- **bcrypt**: Password hashing for security\r\n\r\n## Future Enhancements\r\n- **Expanded Maps**: Add different ecosystems.\r\n- **Leaderboard**: Track top scores for competitive play."
  },
  {
    "name": "2024-RevolutionUC-Hackathon",
    "full_name": "ShivamKGate/2024-RevolutionUC-Hackathon",
    "description": "This is the \"HealthSphere: Data-Driven Wellness Solutions\" repository for RevolutionUC Hackathon 2024 hosted on February 24, 2024. ",
    "html_url": "https://github.com/ShivamKGate/2024-RevolutionUC-Hackathon",
    "language": "HTML",
    "visibility": "public",
    "created_at": "2024-02-24T17:42:28Z",
    "updated_at": "2024-09-09T21:51:27Z",
    "pushed_at": "2024-02-26T00:20:34Z",
    "stargazers_count": 1,
    "forks_count": 1,
    "readme": "This is the Revolution UC 2024 Hackathon Project from Team Kartavya & Shivam. \nThe Project is called HealthSphere: - Data-Driven Wellness Solution\n\nTo Get Started with this project: \n\nWindows:\n    Pre-requisites: \n        Python 3.8+ & Python 3.11-\n        Requirements.txt file from the directory\n\n    Steps:\n    1. To Activate the Flask-Python Backend\n        You would need to be in the right directory of 2024-RevolutionUC-Hackathon/HealthSphere: \n        So if you aren't here already you can type : \n        'cd 2024-RevolutionUC-Hackathon/HealthSphere'\n\n        or \n\n        \"cd HealthSphere\"\n\n        once you are at the root of the project\n\n        to download the required libraries for the virtual environment use the following command:\n\n        \"pip install -r requirements.txt\"\n\n        create a virtual environment using the following command: \n\n        \"python -m venv venv\"\n\n        activate the virtual environment using the following command:\n\n        \"venv/Scripts/activate\"\n\n        to deactivate the virtual environment use the following command:\n\n        \"deactivate\" (optional)\n\n        to download the required libraries for the virtual environment use the following command:\n\n        \"pip install -r requirements.txt\"\n\n        to run the project use the following command:\n\n        \"python app.py\"\n\n    2. To Launch the Taipy Dashboard use the following command\n        2.1 create another Terminal\n        2.2 python taipyserver.py\n\n        launch it on http://127.0.0.1:8080\n\n\nMac:\n    For macOS, the steps are quite similar to those for Windows, but there are a few differences. Here are the instructions for setting up and running the HealthSphere project on macOS:\n\nPre-requisites:\nPython 3.8+ & Python 3.11-\nRequirements.txt file from the project directory\nTerminal application\nSteps:\nOpen Terminal:\nOpen the Terminal application on your macOS. You can find it by searching for \"Terminal\" in Spotlight or navigating to Applications > Utilities > Terminal.\n\nNavigate to Project Directory:\nUse the cd command to navigate to the root directory of your HealthSphere project. If the project is located in your home directory, you can use:\n\njavascript\nCopy code\ncd ~/2024-RevolutionUC-Hackathon/HealthSphere\nIf it's located elsewhere, navigate to the appropriate directory.\n\nSetup Virtual Environment:\nRun the following commands in Terminal to set up a virtual environment and activate it:\n\nbash\nCopy code\npython3 -m venv venv\nsource venv/bin/activate\nInstall Dependencies:\nOnce the virtual environment is activated, install the required Python libraries using pip:\n\nCopy code\npip install -r requirements.txt\nRun Flask Backend:\nStart the Flask backend server by running:\n\nCopy code\npython app.py\nLaunch Taipy Dashboard:\nOpen another Terminal window (or tab) and navigate to the project directory if you're not already there.\n\nThen, run the Taipy Dashboard server using:\n\nCopy code\npython taipyserver.py\nAccess the Application:\nOnce both the Flask backend and Taipy Dashboard are running, you can access the HealthSphere application by visiting http://127.0.0.1:8080 in your web browser."
  },
  {
    "name": "AniCard",
    "full_name": "Team-AniCard/AniCard",
    "description": "New start for the bot AniCard",
    "html_url": "https://github.com/Team-AniCard/AniCard",
    "language": "TypeScript",
    "visibility": "private",
    "created_at": "2023-01-02T10:10:13Z",
    "updated_at": "2023-01-02T10:46:19Z",
    "pushed_at": "2023-01-02T10:48:59Z",
    "stargazers_count": 0,
    "forks_count": 0
  },
  {
    "name": "anicard-assets",
    "full_name": "Team-AniCard/anicard-assets",
    "description": "Assets for the AniCard TCG discord bot",
    "html_url": "https://github.com/Team-AniCard/anicard-assets",
    "visibility": "public",
    "created_at": "2021-06-22T17:08:36Z",
    "updated_at": "2021-08-03T11:50:48Z",
    "pushed_at": "2021-08-03T11:50:45Z",
    "stargazers_count": 0,
    "forks_count": 0,
    "readme": "# anicard-assets\nAssets for the AniCard TCG discord bot"
  },
  {
    "name": "anicard-bot",
    "full_name": "Team-AniCard/anicard-bot",
    "description": "Code for the Anicard Bot",
    "html_url": "https://github.com/Team-AniCard/anicard-bot",
    "language": "Python",
    "visibility": "private",
    "created_at": "2021-06-21T02:06:32Z",
    "updated_at": "2021-08-09T09:59:28Z",
    "pushed_at": "2021-08-09T09:59:25Z",
    "stargazers_count": 0,
    "forks_count": 0,
    "readme": "# anicard-bot\r\nCode for the Anicard Bot\r\n\r\n\r\n\r\n## Plans\r\n\r\n- [x] Change db to mongodb\r\n- [ ] Lootbox\r\n- [ ] Cards\r\n- [ ] 100 floors only\r\n- [ ] Battling\r\n- [ ] Lottery\r\n- [ ] Trivia\r\n- [ ] Drop & Grab\r\n    - [x] Main Drop\r\n    - [x] Claim cd\r\n    - [x] Drop cd\r\n    - [ ] Better Cards\r\n    - [ ] Database connection\r\n- [ ] Raids\r\n- [ ] Quest\r\n- [ ] Story Mode\r\n- [ ] Signature Moves\r\n- [ ] Orlay cards\r\n- [ ] Referral\r\n- [ ] Events\r\n- [ ] Collabs"
  },
  {
    "name": "anicard-bot-js",
    "full_name": "Team-AniCard/anicard-bot-js",
    "description": "A cool discord bot",
    "html_url": "https://github.com/Team-AniCard/anicard-bot-js",
    "language": "JavaScript",
    "visibility": "private",
    "created_at": "2021-09-20T17:02:25Z",
    "updated_at": "2021-09-27T15:03:33Z",
    "pushed_at": "2021-09-27T15:03:31Z",
    "stargazers_count": 0,
    "forks_count": 0,
    "readme": "# Anicard Discord Bot\n\nThe worlds Best discord bot"
  },
  {
    "name": "anicard-bot-ts",
    "full_name": "Team-AniCard/anicard-bot-ts",
    "description": "AniCard Discord Bot in TypeScript",
    "html_url": "https://github.com/Team-AniCard/anicard-bot-ts",
    "language": "TypeScript",
    "visibility": "private",
    "created_at": "2021-09-05T05:27:04Z",
    "updated_at": "2021-09-23T14:39:10Z",
    "pushed_at": "2021-09-05T22:36:24Z",
    "stargazers_count": 0,
    "forks_count": 0,
    "readme": "# anicard-bot-ts\nAniCard Bot in TypeScript"
  },
  {
    "name": "anicard-examples",
    "full_name": "Team-AniCard/anicard-examples",
    "html_url": "https://github.com/Team-AniCard/anicard-examples",
    "language": "Python",
    "visibility": "private",
    "created_at": "2021-08-03T10:50:10Z",
    "updated_at": "2021-10-04T12:48:56Z",
    "pushed_at": "2021-10-04T12:48:53Z",
    "stargazers_count": 0,
    "forks_count": 0,
    "readme": "# Instructions\n1. Remember to use imgbb.com links.\n2. All other locations data must look like same\n3. Added cards stats and type that you think suits the best\n    - Don't forget the add the emoji. While adding type"
  },
  {
    "name": "makeuc2022",
    "full_name": "UltraVaporizer/makeuc2022",
    "description": "This repo contains a variety of books in their raw text form. These texts are read from for a MakeUC 2022 project",
    "html_url": "https://github.com/UltraVaporizer/makeuc2022",
    "visibility": "public",
    "created_at": "2022-10-22T17:44:03Z",
    "updated_at": "2022-10-22T23:46:27Z",
    "pushed_at": "2022-10-23T14:34:55Z",
    "stargazers_count": 0,
    "forks_count": 0
  }
]